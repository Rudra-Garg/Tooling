
Filename: .gitignore
Content:
### Example user template template
### Example user template
app/connection.py
# IntelliJ project files
.idea
*.iml
out
gen
### Flask template
instance/*
!instance/.gitignore
.webassets-cache
.env

### Python template
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

app/connection.py


================================================================================

Filename: README.md
Content:
This is a attendance management system which uses flask backend with MySQL database


================================================================================

Filename: app/__init__.py
Content:
from flask import *
from app.faculty import *
from app.login import *
from app.student import *
from app.connection import *
from app.admin import *


================================================================================

Filename: app/admin.py
Content:
from datetime import datetime

from flask import Blueprint, request, render_template, jsonify

from app.connection import *

admin_bp = Blueprint('admin', __name__)


@admin_bp.route('/admin')
def admin_page():
    userID = request.args.get('userID')  # Retrieve user ID from query parameter
    return render_template('admin.html', userID=userID)


# Endpoint to find the greatest userId from the login table
@admin_bp.route('/find_greatest_user_id', methods=['GET'])
def find_greatest_user_id():
    try:
        cursor.execute("SELECT MAX(userId) AS greatest_user_id FROM login")
        result = cursor.fetchall()[0]
        greatest_user_id = result['greatest_user_id']

        return jsonify({'greatest_user_id': greatest_user_id}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@admin_bp.route('/add_member', methods=['POST'])
def add_member():
    cursor.execute("SELECT MAX(userId) AS greatest_user_id FROM login")
    result = cursor.fetchall()[0]
    userId = result['greatest_user_id'] + 1
    data = request.json
    member_type = data.get('memberType')
    name = data.get('name')
    email = data.get('email')
    passwd = data.get('passwd')
    cursor.execute("INSERT INTO login VALUES (%s, %s, %s, %s)", (userId, member_type, email, passwd))
    if member_type == 'student':
        cursor.execute("INSERT INTO student VALUES (%s, %s, %s, %s)", (userId, name, email, "Default"))
    elif member_type == 'faculty':
        cursor.execute("INSERT INTO faculty VALUES (%s, %s, %s, %s, %s, %s)",
                       (userId, name, email, "Default", 75, datetime.now().date()))
    db.commit()

    return jsonify({'message': 'Member added successfully'}), 200


@admin_bp.route('/get_member_details', methods=['GET'])
def get_member_details():
    userId = request.args.get('userId')
    cursor.execute("SELECT * FROM login WHERE userId = %s", (userId,))
    user_data = cursor.fetchone()
    cursor.nextset()
    if user_data:
        if user_data['userType'] == 'Student':
            cursor.execute("SELECT * FROM student WHERE studentId = %s", (userId,))
        elif user_data['userType'] == 'Faculty':
            cursor.execute("SELECT * FROM faculty WHERE facultyId = %s", (userId,))
        member_data = cursor.fetchall()[0]
        return jsonify({'user': user_data, 'member_details': member_data}), 200
    else:
        return jsonify({'error': 'User not found'}), 404


@admin_bp.route('/remove_member', methods=['POST'])
def remove_member():
    try:
        userId = request.json['userId']
        cursor.execute("SELECT userType FROM login WHERE userId = %s", (userId,))
        user_type = cursor.fetchall()[0]['userType']
        cursor.execute("DELETE FROM attendance WHERE studentId = %s OR facultyId = %s", (userId, userId))
        cursor.execute("DELETE FROM leave_application WHERE studentId = %s OR facultyId = %s", (userId, userId))
        if user_type == 'Student':
            cursor.execute("DELETE FROM student WHERE studentId = %s", (userId,))
        elif user_type == 'Faculty':
            cursor.execute("DELETE FROM faculty WHERE facultyId = %s", (userId,))

        cursor.execute("DELETE FROM login WHERE userId = %s", (userId,))
        db.commit()
        return jsonify({'message': 'Member removed successfully'}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500


# Endpoint to add a new subject to the database for a student or faculty member
@admin_bp.route('/add_subject', methods=['POST'])
def add_subject():
    # Get data from the request body
    data = request.json
    user_id = data.get('user_id')
    subject_name = data.get('subject_name')
    cursor.execute("SELECT * FROM login WHERE userId = %s", (user_id,))
    user_data = cursor.fetchone()
    print(user_data)
    if user_data:
        userType = user_data['userType']
        if userType == 'Student':
            cursor.execute("SELECT * FROM student WHERE studentId = %s", (user_id,))
            student_data = cursor.fetchall()[0]
            if student_data["subject"] == "Default":
                cursor.execute("UPDATE student SET subject = %s WHERE studentId = %s",
                               (subject_name, user_id))
            else:
                cursor.execute("INSERT INTO student (studentId, studentName, email, subject) "
                               "VALUES (%s, %s, %s, %s)",
                               (user_id, student_data['studentName'], student_data['email'], subject_name))
        elif userType == 'Faculty':
            # Check if default subject exists for the faculty
            cursor.execute("SELECT * FROM faculty WHERE facultyId = %s", (user_id,))
            faculty_data = cursor.fetchall()[0]
            if faculty_data["subject"] == "Default":

                cursor.execute(
                    "UPDATE faculty SET subject = %s, attendencePercentageCriteria = %s WHERE facultyId = %s",
                    (subject_name, data.get("attendance_percentage"), user_id))
            else:
                # Add a new row with all details including the new subject
                cursor.execute("INSERT INTO faculty (facultyId, facultyName, email, subject, "
                               "attendencePercentageCriteria, joiningDate) "
                               "VALUES (%s, %s, %s, %s, %s, %s)",
                               (user_id, faculty_data['facultyName'], faculty_data['email'], subject_name,
                                data.get("attendance_percentage"), faculty_data['joiningDate']))
        db.commit()

        # Return success message
        return jsonify({'message': 'Subject added successfully'}), 200
    else:
        return jsonify({'error': 'User not found'}), 404


@admin_bp.route('/get_subjects', methods=['GET'])
def get_subjects():
    userId = request.args.get('userId')
    cursor.execute("SELECT * FROM login WHERE userId = %s", (userId,))
    user_data = cursor.fetchone()
    cursor.nextset()
    subject_list = []
    if user_data:
        if user_data['userType'] == 'Student':
            cursor.execute("SELECT subject FROM student WHERE studentId = %s", (userId,))
        elif user_data['userType'] == 'Faculty':
            cursor.execute("SELECT subject FROM faculty WHERE facultyId = %s", (userId,))
        subject_list = cursor.fetchall()
    subject_list = [subject['subject'] for subject in subject_list]
    return jsonify({'subjects': subject_list}), 200


@admin_bp.route('/remove_subject', methods=['POST'])
def remove_subject():
    data = request.json
    userId = data.get('userId')
    subjectName = data.get('subjectName')
    cursor.execute("SELECT * FROM login WHERE userId = %s", (userId,))
    user_data = cursor.fetchone()
    cursor.nextset()
    if user_data:
        if user_data['userType'] == 'Student':
            cursor.execute("DELETE FROM attendance WHERE studentId = %s AND subject = %s", (userId, subjectName))
            cursor.execute("DELETE FROM leave_application WHERE studentId = %s AND subject = %s", (userId, subjectName))
            cursor.execute("SELECT COUNT(*) FROM student WHERE studentId = %s", (userId,))
            subject_count = cursor.fetchone()["COUNT(*)"]
            if subject_count == 1:  # If only one subject left, convert it to "DEFAULT"
                cursor.execute("UPDATE student SET subject = 'Default' WHERE studentId = %s", (userId,))
            else:
                cursor.execute("DELETE FROM student WHERE studentId = %s AND subject = %s", (userId, subjectName))
        elif user_data['userType'] == 'Faculty':
            cursor.execute("DELETE FROM attendance WHERE facultyId = %s AND subject = %s", (userId, subjectName))
            cursor.execute("DELETE FROM leave_application WHERE facultyId = %s AND subject = %s", (userId, subjectName))
            cursor.execute("SELECT COUNT(*) FROM faculty WHERE facultyId = %s", (userId,))
            subject_count = cursor.fetchone()["COUNT(*)"]
            if subject_count == 1:  # If only one subject left, convert it to "DEFAULT"
                cursor.execute("UPDATE faculty SET subject = 'Default' WHERE facultyId = %s", (userId,))
            else:
                cursor.execute("DELETE FROM faculty WHERE facultyId = %s AND subject = %s", (userId, subjectName))
    db.commit()
    return jsonify({'message': 'Subject removed successfully'}), 200


================================================================================

Filename: app/connection.py
Content:
# Connect to MySQL database
import mysql.connector

db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="ManHunter@471",
    database="attendance_system"
)

cursor = db.cursor(dictionary=True)


================================================================================

Filename: app/faculty.py
Content:
from flask import Blueprint, request, jsonify, render_template

from app.connection import *

faculty_bp = Blueprint('faculty', __name__)


# Routes related to faculty functionality
@faculty_bp.route('/faculty')
def faculty_page():
    userID = request.args.get('userID')  # Retrieve user ID from query parameter
    return render_template('faculty.html', userID=userID)


@faculty_bp.route('/getFacultyDetails', methods=['GET'])
def get_faculty_details():
    userID = request.args.get('userID')
    print("UID; ", userID)
    cursor.execute("SELECT * FROM faculty WHERE facultyId = %s", (userID,))
    faculty = cursor.fetchall()
    faculty = faculty[0]
    return jsonify(faculty)


@faculty_bp.route('/getFacultySubjects', methods=['GET'])
def get_faculty_subjects():
    userID = request.args.get('userID')
    print(userID)
    cursor.execute("SELECT subject FROM faculty WHERE facultyId = %s", (userID,))
    subjects = cursor.fetchall()
    return jsonify(subjects)


@faculty_bp.route('/getStudentDetails', methods=['GET'])
def get_student_details():
    userID = request.args.get('userID')
    cursor.execute("SELECT * FROM student WHERE studentId = %s", (userID,))
    student = cursor.fetchall()
    student = student[0]
    return jsonify(student)


@faculty_bp.route('/getStudentUserIDs', methods=['GET'])
def get_student_user_ids():
    subject = request.args.get('subject')
    cursor.execute("SELECT studentId FROM student WHERE subject = %s", (subject,))
    results = cursor.fetchall()
    user_ids = [result['studentId'] for result in results]
    return jsonify(user_ids)


@faculty_bp.route('/markAttendance', methods=['POST'])
def mark_attendance():
    data = request.json
    student_id = data['student_id']
    faculty_id = data['faculty_id']
    subject = data['subject']
    date = data['date']
    status = data['status']

    # Check if the attendance record already exists
    cursor.execute("SELECT * FROM attendance WHERE subject = %s AND studentId = %s AND date = %s",
                   (subject, student_id, date))
    existing_record = cursor.fetchone()

    if existing_record:
        # If the record exists, update the status
        cursor.execute("UPDATE attendance SET status = %s WHERE subject = %s AND studentId = %s AND date = %s",
                       (status, subject, student_id, date))
        db.commit()
        return jsonify({'message': 'Attendance updated successfully'}), 200
    else:
        # If the record does not exist, insert a new record
        cursor.execute(
            "INSERT INTO attendance (subject, studentId, facultyId, date, status) VALUES (%s, %s, %s, %s, %s)",
            (subject, student_id, faculty_id, date, status))
        db.commit()
        return jsonify({'message': 'Attendance marked successfully'}), 200


@faculty_bp.route('/getLeaveApplication', methods=['GET'])
def get_leave_applications():
    userID = request.args.get('userID')
    cursor.execute("select * from leave_application where facultyId = %s", (userID,))
    applications = cursor.fetchall()
    for i in applications:
        cursor.execute("SELECT studentName FROM student WHERE studentId = %s", (i['studentId'],))
        i['studentName'] = cursor.fetchall()[0]['studentName']
    return jsonify(applications)


@faculty_bp.route('/approveLeave', methods=['POST'])
def approve_leave():
    # Get application ID from request body
    application_id = request.json['applicationId']
    cursor.execute("UPDATE leave_application SET status = 'Approved' WHERE applicationId = %s", (application_id,))
    # update the attendance table data if marked as absent
    cursor.execute("SELECT * FROM leave_application WHERE applicationId = %s", (application_id,))
    application = cursor.fetchall()[0]
    print(application)
    cursor.execute("UPDATE attendance SET status = 'Present' WHERE studentId = %s and status = 'Absent' "
                   "and date between %s and %s and subject = %s", (application['studentId'], application['start_date'],
                                                                   application['end_date'], application['subject']))

    db.commit()
    return jsonify({'message': 'Leave application approved successfully'}), 200


# Endpoint to reject leave application
@faculty_bp.route('/rejectLeave', methods=['POST'])
def reject_leave():
    # Get application ID from request body
    application_id = request.json['applicationId']
    cursor.execute("UPDATE leave_application SET status = 'Rejected' WHERE applicationId = %s", (application_id,))
    db.commit()
    return jsonify({'message': 'Leave application rejected successfully'}), 200


@faculty_bp.route('/getDefaulters', methods=['GET'])
def get_defaulters():
    subject = request.args.get('subject')
    attendance = []
    cursor.execute("SELECT studentId FROM student WHERE subject = %s", (subject,))
    user_ids = [result['studentId'] for result in cursor.fetchall()]
    cursor.execute("select attendencePercentageCriteria from faculty where subject = %s", (subject,))
    criterion = cursor.fetchall()[0]['attendencePercentageCriteria']
    for id in user_ids:
        cursor.execute(
            "SELECT COUNT(*) AS present_count FROM attendance WHERE studentId = %s AND subject = %s AND status = 'Present'",
            (id, subject))
        present_count = cursor.fetchall()[0]['present_count']
        cursor.execute("SELECT COUNT(*) AS total_count FROM attendance WHERE studentId = %s AND subject = %s",
                       (id, subject))
        total_count = cursor.fetchall()[0]['total_count']
        if total_count != 0:
            average_attendance = (present_count / total_count) * 100
        else:
            average_attendance = 0
        if average_attendance < criterion:
            temp = [id]
            cursor.execute("SELECT studentName FROM student WHERE studentId = %s", (id,))
            temp.append(cursor.fetchall()[0]['studentName'])
            average_attendance = round(average_attendance, 2)
            temp.append(average_attendance)
            attendance.append(temp)

    return jsonify(attendance)


================================================================================

Filename: app/login.py
Content:
from flask import Blueprint, request, jsonify

from app.connection import *

login_bp = Blueprint('login', __name__)


# Routes related to log in functionality
@login_bp.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    user = user_type(username, password)
    if user:
        return jsonify({'message': 'Login successful', 'usertype': user['userType'], 'userID': user['userId']}), 200
    else:
        return jsonify({'message': 'Invalid username or password'}), 401


def user_type(username, password):
    cursor.execute("SELECT * FROM login WHERE userName = %s AND password = %s", (username, password))
    user = cursor.fetchone()
    if user:
        return user
    else:
        return None

# Add more routes related to log in functionality as needed


================================================================================

Filename: app/student.py
Content:
from flask import Blueprint, request, jsonify, render_template

from app.connection import *

student_bp = Blueprint('student', __name__)


# Routes related to student functionality
@student_bp.route('/student')
def student_page():
    userID = request.args.get('userID')  # Retrieve user ID from query parameter
    return render_template('student.html', userID=userID)


@student_bp.route('/getStudentDetails', methods=['GET'])
def get_student_details():
    userID = request.args.get('userID')
    cursor.execute("SELECT * FROM student WHERE studentId = %s", (userID,))
    result = cursor.fetchall()
    student = result[0]
    return jsonify(student)


@student_bp.route('/getStudentSubjects', methods=['GET'])
def get_student_subjects():
    userID = request.args.get('userID')
    cursor.execute("SELECT subject FROM student WHERE studentId = %s", (userID,))
    subjects = cursor.fetchall()
    return jsonify(subjects)


@student_bp.route('/getStudentAttendance', methods=['GET'])
def get_student_attendance():
    userID = request.args.get('userID')
    subject = request.args.get('subject')
    db.reconnect()  # Retrieve subject from query parameter
    cursor.execute("SELECT subject, status, date FROM attendance WHERE studentId = %s AND subject = %s order by date",
                   (userID, subject))
    attendance = cursor.fetchall()
    return jsonify(attendance)


@student_bp.route('/getStudentAverageAttendance', methods=['GET'])
def get_student_average_attendance():
    userID = request.args.get('userID')
    subject = request.args.get('subject')
    cursor.execute(
        "SELECT COUNT(*) AS present_count FROM attendance WHERE studentId = %s AND subject = %s AND status = 'Present'",
        (userID, subject))
    present_count = cursor.fetchone()['present_count']
    cursor.execute("SELECT COUNT(*) AS total_count FROM attendance WHERE studentId = %s AND subject = %s",
                   (userID, subject))
    total_count = cursor.fetchone()['total_count']
    if total_count != 0:
        average_attendance = (present_count / total_count) * 100
    else:
        average_attendance = 0
    cursor.execute("select attendencePercentageCriteria from faculty where subject = %s", (subject,))
    criterion = cursor.fetchall()[0]['attendencePercentageCriteria']
    return jsonify({'average_attendance': round(average_attendance, 2), 'criterion': criterion})


@student_bp.route('/getLeaveApplications', methods=['GET'])
def get_leave_applications():
    userID = request.args.get('userID')
    cursor.execute("SELECT * FROM leave_application WHERE studentId = %s", (userID,))
    applications = cursor.fetchall()
    return jsonify(applications)


@student_bp.route('/submitLeaveApplication', methods=['POST'])
def submit_leave_application():
    try:
        # Get data from the request body
        data = request.json

        # Extract data
        subject = data.get('subject')
        startDate = data.get('startDate')
        endDate = data.get('endDate')
        reason = data.get('reason')
        student_id = data.get('studentId')
        # Fetch facultyid from faculty table
        cursor.execute("SELECT facultyId FROM faculty WHERE subject = %s", (subject,))
        faculty_id = cursor.fetchall()[0]['facultyId']
        # Fetch last application id from leave_application table
        cursor.execute("SELECT applicationId FROM leave_application ORDER BY applicationId DESC LIMIT 1")
        last_application_id = cursor.fetchall()[0]['applicationId']
        sql = "INSERT INTO leave_application VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"
        val = (last_application_id + 1, student_id, faculty_id, subject, startDate, endDate, reason, "Pending")
        cursor.execute(sql, val)
        db.commit()

        return jsonify({"message": "Leave application submitted successfully"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


================================================================================

Filename: dbmsProject.sql
Content:
drop database if exists attendance_system;
create database attendance_system;
use attendance_system;
create table login
(
    userId   int primary key not NULL,
    userType enum ("Student", "Faculty", "Admin"),
    userName varchar(50),
    password varchar(50)
);
create table student
(
    studentId   int,
    studentName varchar(50),
    email       varchar(100),
    subject     varchar(20),
    primary key (studentId, subject),
    foreign key (studentId) references login (userId)
);

create table faculty
(
    facultyId                    int,
    facultyName                  varchar(50),
    email                        varchar(50),
    subject                      varchar(20),
    attendencePercentageCriteria decimal(4, 2),
    joiningDate                  date,
    primary key (facultyId, subject),
    foreign key (facultyId) references login (userId)
);

create table attendance
(
    subject   varchar(20),
    studentId int,
    facultyId int,
    date      date,
    status    enum ("Present", "Absent"),
    foreign key (studentId, subject) references student (studentId, subject),
    foreign key (facultyId, subject) references faculty (facultyId, subject),
    primary key (subject, studentId, facultyId, date)
);

INSERT INTO login (userId, userType, userName, password)
VALUES (0, 'Admin', 'Admin', 'Admin'),
       (1, 'Student', 'raj.sharma@iiitg.ac.in', 'password123'),
       (2, 'Student', 'priya.singh@iiitg.ac.in', 'student456'),
       (3, 'Student', 'anita.patel@iiitg.ac.in', 'pass789'),
       (4, 'Student', 'vivek.kumar@iiitg.ac.in', 'studentpass'),
       (5, 'Student', 'meera.gupta@iiitg.ac.in', 'brownie22'),
       (6, 'Student', 'arjun.reddy@iiitg.ac.in', 'davismike'),
       (7, 'Student', 'sunita.rai@iiitg.ac.in', 'wilsonSara'),
       (8, 'Student', 'rohan.biswas@iiitg.ac.in', 'david123'),
       (9, 'Student', 'isha.chopra@iiitg.ac.in', 'anderson345'),
       (10, 'Student', 'aman.malhotra@iiitg.ac.in', 'taylorJames'),
       (11, 'Faculty', 'gupta@iiitg.ac.in', 'facultyPass'),
       (12, 'Faculty', 'iyer@iiitg.ac.in', 'johnsonFaculty'),
       (13, 'Faculty', 'deshmukh@iiitg.ac.in', 'profBrown');

INSERT INTO faculty (facultyId, facultyName, email, subject, attendencePercentageCriteria, joiningDate)
VALUES (11, 'Dr. Gupta', 'gupta@iiitg.ac.in', 'Mathematics', 80.00, '2023-01-15'),
       (11, 'Dr. Gupta', 'gupta@iiitg.ac.in', 'Economics', 80.00, '2023-01-15'),
       (12, 'Prof. Iyer', 'iyer@iiitg.ac.in', 'Physics', 75.00, '2022-08-20'),
       (12, 'Prof. Iyer', 'iyer@iiitg.ac.in', 'Mechanics', 75.00, '2022-08-20'),
       (13, 'Dr. Deshmukh', 'deshmukh@iiitg.ac.in', 'Biology', 85.00, '2023-03-10'),
       (13, 'Dr. Deshmukh', 'deshmukh@iiitg.ac.in', 'Chemistry', 85.00, '2023-03-10');

INSERT INTO student (studentId, studentName, email, subject)
VALUES (1, 'Raj Sharma', 'raj.sharma@iiitg.ac.in', 'Mathematics'),
       (1, 'Raj Sharma', 'raj.sharma@iiitg.ac.in', 'Physics'),
       (1, 'Raj Sharma', 'raj.sharma@iiitg.ac.in', 'Chemistry'),
       (1, 'Raj Sharma', 'raj.sharma@iiitg.ac.in', 'Biology'),
       (2, 'Priya Singh', 'priya.singh@iiitg.ac.in', 'Physics'),
       (2, 'Priya Singh', 'priya.singh@iiitg.ac.in', 'Chemistry'),
       (2, 'Priya Singh', 'priya.singh@iiitg.ac.in', 'Biology'),
       (2, 'Priya Singh', 'priya.singh@iiitg.ac.in', 'Economics'),
       (3, 'Anita Patel', 'anita.patel@iiitg.ac.in', 'Biology'),
       (3, 'Anita Patel', 'anita.patel@iiitg.ac.in', 'Chemistry'),
       (3, 'Anita Patel', 'anita.patel@iiitg.ac.in', 'Mathematics'),
       (3, 'Anita Patel', 'anita.patel@iiitg.ac.in', 'Mechanics'),
       (4, 'Vivek Kumar', 'vivek.kumar@iiitg.ac.in', 'Chemistry'),
       (4, 'Vivek Kumar', 'vivek.kumar@iiitg.ac.in', 'Mathematics'),
       (4, 'Vivek Kumar', 'vivek.kumar@iiitg.ac.in', 'Physics'),
       (4, 'Vivek Kumar', 'vivek.kumar@iiitg.ac.in', 'Mechanics'),
       (5, 'Meera Gupta', 'meera.gupta@iiitg.ac.in', 'Economics'),
       (5, 'Meera Gupta', 'meera.gupta@iiitg.ac.in', 'Mathematics'),
       (5, 'Meera Gupta', 'meera.gupta@iiitg.ac.in', 'Physics'),
       (5, 'Meera Gupta', 'meera.gupta@iiitg.ac.in', 'Chemistry'),
       (6, 'Arjun Reddy', 'arjun.reddy@iiitg.ac.in', 'Physics'),
       (6, 'Arjun Reddy', 'arjun.reddy@iiitg.ac.in', 'Chemistry'),
       (6, 'Arjun Reddy', 'arjun.reddy@iiitg.ac.in', 'Biology'),
       (6, 'Arjun Reddy', 'arjun.reddy@iiitg.ac.in', 'Mathematics'),
       (7, 'Sunita Rai', 'sunita.rai@iiitg.ac.in', 'Chemistry'),
       (7, 'Sunita Rai', 'sunita.rai@iiitg.ac.in', 'Physics'),
       (7, 'Sunita Rai', 'sunita.rai@iiitg.ac.in', 'Biology'),
       (7, 'Sunita Rai', 'sunita.rai@iiitg.ac.in', 'Mechanics'),
       (8, 'Rohan Biswas', 'rohan.biswas@iiitg.ac.in', 'Mathematics'),
       (8, 'Rohan Biswas', 'rohan.biswas@iiitg.ac.in', 'Physics'),
       (8, 'Rohan Biswas', 'rohan.biswas@iiitg.ac.in', 'Chemistry'),
       (8, 'Rohan Biswas', 'rohan.biswas@iiitg.ac.in', 'Mechanics'),
       (9, 'Isha Chopra', 'isha.chopra@iiitg.ac.in', 'Physics'),
       (9, 'Isha Chopra', 'isha.chopra@iiitg.ac.in', 'Chemistry'),
       (9, 'Isha Chopra', 'isha.chopra@iiitg.ac.in', 'Biology'),
       (9, 'Isha Chopra', 'isha.chopra@iiitg.ac.in', 'Economics'),
       (10, 'Aman Malhotra', 'aman.malhotra@iiitg.ac.in', 'Chemistry'),
       (10, 'Aman Malhotra', 'aman.malhotra@iiitg.ac.in', 'Biology'),
       (10, 'Aman Malhotra', 'aman.malhotra@iiitg.ac.in', 'Physics'),
       (10, 'Aman Malhotra', 'aman.malhotra@iiitg.ac.in', 'Economics');


-- Change delimiter to //
DELIMITER //

CREATE PROCEDURE generate_random_attendance()
BEGIN
    -- Loop through each student for each subject
    DECLARE student_count INT DEFAULT 1;
    DECLARE subject_count INT DEFAULT 1;
    DECLARE date_counter DATE DEFAULT '2024-03-01'; -- Start date
    DECLARE present_probability FLOAT DEFAULT 0.8; -- 80% probability of being present

    WHILE student_count <= 10
        DO
            -- Assuming 10 students
            WHILE subject_count <= 6
                DO -- Assuming 6 subjects
            -- Fetch facultyId for the subject
                    SET @subject_name = (SELECT subject
                                         FROM student
                                         WHERE studentId = student_count
                                         ORDER BY RAND()
                                         LIMIT 1 -- Randomly select one subject per student
                    );

                    SET @faculty_id = (SELECT facultyId
                                       FROM faculty
                                       WHERE subject = @subject_name
                                       ORDER BY RAND()
                                       LIMIT 1 -- Randomly select one faculty member for the subject
                    );

                    WHILE date_counter <= DATE_ADD('2024-03-14', INTERVAL 1 DAY)
                        DO -- Extend attendance for two weeks
                    -- Check if attendance record already exists for the student, subject, and date
                            IF NOT EXISTS (SELECT 1
                                           FROM attendance
                                           WHERE studentId = student_count
                                             AND subject = @subject_name
                                             AND date = date_counter) THEN
                                -- Insert random attendance status
                                INSERT INTO attendance (subject, studentId, facultyId, date, status)
                                VALUES (@subject_name,
                                        student_count,
                                        @faculty_id,
                                        date_counter,
                                        CASE WHEN RAND() < present_probability THEN 'Present' ELSE 'Absent' END);
                            END IF;

                            SET date_counter = DATE_ADD(date_counter, INTERVAL 1 DAY); -- Move to the next date
                        END WHILE;

                    SET date_counter = '2024-03-01'; -- Reset date for the next subject
                    SET subject_count = subject_count + 1; -- Move to the next subject
                END WHILE;

            SET subject_count = 1; -- Reset subject for the next student
            SET student_count = student_count + 1; -- Move to the next student
        END WHILE;
END//

-- Reset delimiter to ;
DELIMITER ;
call generate_random_attendance();

select *
from student;
select *
from faculty;
select *
from attendance;
select *
from login;

create table leave_application
(
    applicationId int primary key not NULL,
    studentId     int,
    facultyId     int,
    subject       varchar(20),
    start_date    date,
    end_date      date,
    reason        varchar(200),
    status        enum ("Approved", "Rejected", "Pending"),
    foreign key (studentId, subject) references student (studentId, subject),
    foreign key (facultyId, subject) references faculty (facultyId, subject)
);

insert into leave_application
values (1, 1, 11, 'Mathematics', '2023-04-01', '2023-04-10', 'Sick Leave', 'Pending');

================================================================================

Filename: img.png
Content:
[Binary file - cannot display content]


Filename: main.py
Content:
from app import *


def create_app():
    app = Flask(__name__) 
    app.register_blueprint(student_bp)
    app.register_blueprint(faculty_bp)
    app.register_blueprint(login_bp)
    app.register_blueprint(admin_bp)
    return app


app = create_app()


@app.route('/')
def login_page():
    return render_template('login.html')    


if __name__ == "__main__":
    app.run(debug=True)


================================================================================

Filename: main_old
Content:
import mysql.connector
from flask import *
#ertyui5
app = Flask(__name__)

db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="0000",
    database="attendance_system"
)

cursor = db.cursor(dictionary=True)


@app.route('/')
def login_page():
    return render_template('login.html')


@app.route('/student')
def student_page():
    userID = request.args.get('userID')  # Retrieve user ID from query parameter
    return render_template('student.html', userID=userID)


@app.route('/faculty')
def faculty_page():
    userID = request.args.get('userID')  # Retrieve user ID from query parameter
    return render_template('faculty.html', userID=userID)


@app.route('/getStudents', methods=['GET'])
def get_students():
    cursor.execute("SELECT * FROM student")
    students = cursor.fetchall()
    return jsonify(students)


# Endpoint to retrieve all faculty members
@app.route('/getFaculty', methods=['GET'])
def get_faculty():
    cursor.execute("SELECT * FROM faculty")
    faculty = cursor.fetchall()
    return jsonify(faculty)


# Endpoint to retrieve attendance records
@app.route('/getAttendance', methods=['GET'])
def get_attendance():
    cursor.execute("SELECT * FROM attendance")
    attendance = cursor.fetchall()
    return jsonify(attendance)


@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    user = userType(username, password)
    print(user)
    if user:
        return jsonify({'message': 'Login successful', 'usertype': user['userType'], 'userID': user['userId']}), 200
    else:
        return jsonify({'message': 'Invalid username or password'}), 401


def userType(username, password):
    cursor.execute("SELECT * FROM login WHERE userName = %s AND password = %s", (username, password))
    user = cursor.fetchone()
    if user:
        return user
    else:
        return None


@app.route('/getStudentDetails', methods=['GET'])
def get_student_details():
    userID = request.args.get('userID')
    cursor.execute("SELECT * FROM student WHERE studentId = %s", (userID,))
    result = cursor.fetchall()
    student = result[0]
    return jsonify(student)


@app.route('/getStudentSubjects', methods=['GET'])
def get_student_subjects():
    userID = request.args.get('userID')
    cursor.execute("select subject from student where studentId = %s", (userID,))
    subjects = cursor.fetchall()
    return jsonify(subjects)


@app.route('/getStudentAttendance', methods=['GET'])
def get_student_attendance():
    userID = request.args.get('userID')
    subject = request.args.get('subject')  # Retrieve subject from query parameter
    cursor.execute("SELECT subject, status, date FROM attendance WHERE studentId = %s AND subject = %s",
                   (userID, subject))
    attendance = cursor.fetchall()
    return jsonify(attendance)


@app.route('/getFacultyDetails', methods=['GET'])
def get_faculty_details():
    userID = request.args.get('userID')
    cursor.execute("SELECT * FROM faculty WHERE facultyId = %s", (userID,))
    student = cursor.fetchone()
    return jsonify(student)


@app.route('/getFacultySubjects', methods=['GET'])
def get_faculty_subjects():
    userID = request.args.get('userID')
    cursor.execute("select subject from faculty where facultyId = %s", (userID,))
    subjects = cursor.fetchall()
    print(subjects)
    return jsonify(subjects)


# Function to calculate average attendance percentage for a student
def calculate_average_attendance(student_id, subject):
    cursor.execute("SELECT COUNT(*) as total_records FROM attendance WHERE studentId = %s and subject = %s",
                   (student_id, subject))
    total_records = cursor.fetchone()['total_records']

    cursor.execute(
        "SELECT COUNT(*) as present_count FROM attendance WHERE studentId = %s AND status = 'Present' and subject = %s",
        (student_id, subject))
    present_count = cursor.fetchone()['present_count']

    if total_records == 0:
        return 0
    else:
        return (present_count / total_records) * 100


# Endpoint to get student's average attendance and compare with target percentage
@app.route('/getStudentAverageAttendance', methods=['GET'])
def get_student_average_attendance():
    userID = request.args.get('userID')
    subject = request.args.get('subject')
    print(subject)
    # Retrieve target percentage from faculty table
    cursor.execute("SELECT * FROM faculty WHERE subject = %s", (subject, ))
    faculty_details = cursor.fetchall()
    print(faculty_details)
    target_percentage = faculty_details[0]['attendencePercentageCriteria']
    # Calculate average attendance percentage for the student
    average_attendance = calculate_average_attendance(userID, subject)

    # Compare average attendance with target percentage
    meets_target = average_attendance >= target_percentage

    return jsonify({
        'average_attendance': average_attendance,
        'target_percentage': target_percentage,
        'meets_target': meets_target
    })


@app.route('/getFacultyAttendance', methods=['GET'])
def get_faculty_attendance():
    userID = request.args.get('userID')
    cursor.execute("SELECT subject, status, date FROM attendance WHERE facultyId = %s", (userID,))
    attendance = cursor.fetchall()
    return jsonify(attendance)


if __name__ == '__main__':
    app.run(debug=True)

================================================================================

Filename: requirements.txt
Content:
[Binary file - cannot display content]


Filename: static/CSS/admin.css
Content:
/* Resetting default margin and padding */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  
}

/* Body styles */
body {
  font-family: Arial, sans-serif;
  background-color: #f0f0f0;
  padding: 20px;
   background: linear-gradient(to bottom, #63a3ec9b, #5959c1b9);  
 
   
}

h1 {
  text-align: center;
  margin-bottom: 20px;
  font-size: 36px;
    /* text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); */
}
.form-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); /* Responsive grid layout */
  grid-gap: 40px;
}

form {
  background-color: rgba(255, 255, 255, 0.9); /* Adding transparency to the form background */
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    max-width: 400px; /* Set a maximum width */
    margin: 0 auto; /* Center the form horizontally */
}

label {
  font-weight: bold;
    margin-bottom: 5px; /* Add margin between label and input */
    display: block; 
  
}

input[type="text"],
select {
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  padding: 10px 20px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

/* Section headings */
h2 {
  margin-top: 40px;
  margin-bottom: 20px;
  text-align: center;
}

/* Additional styles */
.details {
  display: inline;
  text-align: left;
  margin-bottom: 10px;
}

#RemoveSubject{
  background-color: rgba(255, 255, 255, 0.9); /* Adding transparency to the form background */
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    max-width: 95%; /* Set a maximum width */
    margin: 0 auto; /* Center the form horizontally */
}

.confirmation{
  background-color: rgba(255, 255, 255, 0.9); /* Adding transparency to the form background */
  padding: 10px;
  border-radius: 5px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  max-width: 400px; /* Set a maximum width */
  margin: 0 auto; /* Center the form horizontally */
  text-align: center;
}

.confirmation h2{
  margin-top: 10px;
}
.confirmation button{
 margin-top: 10px;
}

================================================================================

Filename: static/CSS/faculty.css
Content:
body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  margin: 0;
  padding: 0;
  /* background: linear-gradient(to right,rgba(27, 177, 27, 0.253),rgba(251, 251, 251, 0.509), rgba(245, 120, 120, 0.272)); */
   background-image: url('../Images/backgroundFaculty.jpg'); 
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
}

h1 {
  color: rgb(255, 255, 255); 
  /* background: linear-gradient(to right,rgba(27, 72, 177, 0.651),rgba(232, 229, 229, 0.509), rgba(120, 128, 245, 0.272)); */
  text-align: center;
  font-size: 45px;
  padding: 12px 0;
  margin: 15px;
  position: relative;
  margin-left: 13.75%;
   /* left: 6.5%;  */
  /* text-shadow: #FFFFFF 2px 5px 15px; */
  
}
h2{
  text-align: center;
  padding: 0px;
  color: #125f92d3;
  margin-top: 0px;
  font-size: 28px;
  margin-bottom: 40px;
}
.details,label{
  margin: 30px;
  font-size: 18px;


}
.attendanceMark strong,label,radio{
  color: #125f92d3;
}

.datestyle{
  margin: 20px;
}
nav {
  display: flex;
  justify-content: center;

  background-color: rgba(54, 6, 84, 0.8);
  padding: 15px 0;
}

nav button {
  position: relative;
  left: 6.5%;
  text-decoration: none;
  color: #ffffff;
  font-size: 19px;
  font-weight: bolder;
  /* border: 2px solid #000000; */
  border-radius: 10px;
  padding: 12px 20px;
  margin: 0 10px;
  transition: background-color 0.3s ease;
  border: none;
}

nav button:nth-child(1) {
  background-color: #3f1fb2cb;

  
}

nav button:nth-child(2) {
  background-color: #3f1fb2cb;
  
}

nav button:nth-child(3) {
  background-color: #3f1fb2cb;
}

nav button:nth-child(4) {
  background-color: #3f1fb2cb;
}

nav button:nth-child(5) {
  background-color: #3f1fb2cb;
  
}

nav button:hover {
  background-color: #125f92;
  color: #ffffff;
}

section.attendance-section {
  padding: 30px;
  text-align: center;
}

.attendance-box {
  position: relative;
    left: 6.5%;
  border-radius: 40px;
  padding: 40px;
  background-color: #EDF7FE;
  /* background-color: #f3f5f7e3; */
  width: 35%;
  height: 55vh;
  margin: 0 auto;
  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
}

footer {
  text-align: center;
  /* margin-left: 6.5%; */
  padding: 10px;
  background-color:rgba(54, 6, 84, 0.8);
  color: #fff;
  position: fixed;
  bottom: 0;
  width: 100%;
}
footer p{
  margin-left: 13%;
}

.nextBtn {
  font-family: "Roboto", sans-serif;
  text-transform: uppercase;
  outline: 0;
  /* text-align: rig20pxht; */
  position: fixed;
  bottom: 37.5%;
  right: 14.5%;

  background: #f075d5a8;
  /* width: 100%; */
  border: 0;
  padding: 25px 40px;
  border-radius: 20px;
  color: #FFFFFF;
  font-size: 20px;
  font-weight: bolder;
  /* font-weight: bolder; */
  -webkit-transition: all 0.3 ease;
  transition: all 0.3 ease;
  cursor: pointer;
  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
}
.nextBtn:hover,.nextBtn:active,.nextBtn:focus {
  background: #f075d5fe;
}

.backBtn {
  font-family: "Roboto", sans-serif;
  text-transform: uppercase;
  outline: 0;
  /* text-align: rig20pxht; */
  position: fixed;
  bottom: 37.5%;
  left: 27%;

  background: #f075d5a8;
  /* width: 100%; */
  border: 0;
  padding: 25px 40px;
  border-radius: 20px;
  color: #FFFFFF;
  font-size: 20px;
  font-weight: bolder;
  /* font-weight: bolder; */
  -webkit-transition: all 0.3 ease;
  transition: all 0.3 ease;
  cursor: pointer;
  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
}
.backBtn:hover,.backBtn:active,.backBtn:focus {
  background: #f075d5fe;
}

.submit{
  /* margin-top: 40px;
  padding: 15px 35px;
  border: none;
  background-color: rgba(239, 224, 239, 0.47);
  color: rgba(0, 0, 0, 0.5);
  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.24);
  border-radius: 15px; */
  padding: 15px 90px;
  margin-top: 30px;
  border: 2px #f075d5a8 solid;
  color: rgb(0, 0, 0);
  font-size: 16px;
  background-color: #fff;
 
  border-radius: 20px;

}
.submit:hover,.submit:active,.submit:focus {
  color:rgb(255, 255, 255);
  background-color: #f075d5a8;
  font-size: 16px;
  border-radius: 20px;
  transition: background-color 0.1s ease;
  border: none;
  /* border: 2px rgb(205, 76, 205) solid; */
}



.dropdown {
  /* float: right; */
  position: relative;
  display: inline-block;
}

.dropdown-content {
  display: none;
  position: absolute;
  color: #ffffff;
  background-color: #df8bf661;
  min-width: 160px;
  overflow: auto;
  padding: 10px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  border-radius: 8px;
  left: 1%;
  top: 11%;
  z-index: 1;

  -moz-user-select: -moz-none;
  -khtml-user-select: none;
  -webkit-user-select: none;

  /*
    Introduced in IE 10.
    See http://ie.microsoft.com/testdrive/HTML5/msUserSelect/
  */
  -ms-user-select: none;
  user-select: none;
}

/* .dropdown-content span {
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
} */

/* .dropdown p:hover {background-color: #ddd;} */
.dropbtn{
   text-decoration: none;
  color: #ffffffd4;
  font-size: 25px;
  font-weight: bolder;
  /* border: 2px solid #000000; */
  position:absolute;
  top: 5%;
  left: 1%;
  transition: background-color 0.3s ease;
  border: none;
  background-color: #125f9200;
}
.dropbtn:hover,.dropbtn:active,.dropbtn:focus {
  color:rgb(255, 255, 255);
  transition: background-color 0.1s ease;
  border: none;
  /* border: 2px rgb(205, 76, 205) solid; */
}

.show {display: block;}
#date{
  border: 1px solid #c4c4c4;
  border-radius: 5px;
  background-color: #fff;
  padding: 3px 5px; 
  width: 120px;
  box-shadow: inset 0 3px 6px rgba(0,0,0,0.1);
}
.defaulters {
  /* text-align: center;
  margin-top: 20px;
  margin: auto;
  border-collapse: collapse;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center; */
  /* margin-left: 39.5%; */
  position: relative;
  left: 6.5%;
  display: flex;
  justify-content: center; /* Centers the table horizontally */
  width: 100%; /* Full width of its parent */
  max-width: 600px; /* Optional: Sets a max width for the container */
  overflow-x: auto; /* Ensures content is scrollable horizontally if it overflows */
  margin: 0 auto; /* Centers the container itself if it has a max-width */
  margin-top: 20px;
}
.defaulters  table
{
  border-collapse: collapse; /* Optional: for styling */
    margin: auto; /* Centers the table in the flex container */
    width: 100%; /* Makes the table expand to fill the container */
    table-layout: fixed; /* Ensures columns are a fixed width */
}


.defaulters th,td{
  padding: 10px;
    /* border-bottom: 1px solid #ddd; */
    color: white;
    background-color: #a378d194;
    text-align: center;

    border: 1px solid #dddddd7d;
}

.defaulters th{
  background-color: #782dc9;
  color: #fff;
  padding: 10px;
  align-items: center;
  justify-content: center;
  text-align: center;
}
.defaulters td, th {
  word-wrap: break-word; /* Allows long words to break and wrap onto the next line */
}

.selectSub,.emptyTable{
  display: block;
  margin-top: 20%;
  color: white;
  text-align: center;
  font-size: 35px;
  font-weight: bolder;
}


.leave-section  table
{
  border-collapse: collapse; /* Optional: for styling */
    margin: auto; /* Centers the table in the flex container */
    width: 100%; /* Makes the table expand to fill the container */
    table-layout: fixed; /* Ensures columns are a fixed width */
    margin-bottom: 40px;
}

.leave-section th,td{
  padding: 10px;
    /* border-bottom: 1px solid #ddd; */
    color: white;
    background-color: #a378d194;
    text-align: center;

    border: 1px solid #dddddd7d;
}

.leave-section th{
  background-color: #782dc9;
  color: #fff;
  padding: 10px;
  align-items: center;
  justify-content: center;
  text-align: center;
}
.leave-section td, th {
  word-wrap: break-word; /* Allows long words to break and wrap onto the next line */
}

.leave-section th:nth-child(4),.leave-section td:nth-child(4) {
  width: 80px; /* Set the desired width */
}
.leave-section th:nth-child(3),.leave-section td:nth-child(3),.leave-section th:nth-child(2),.leave-section td:nth-child(2) {
  width: 80px; /* Set the desired width */
}
.leave-section th:nth-child(1),.leave-section td:nth-child(1)
{
  width: 50px;;
}
.leave-section th:nth-child(5),.leave-section td:nth-child(5)
{
  width: 50px;;
}

.leave-section
{
  position: relative;
    left: 6.5%;
  display: flex;
  justify-content: center; /* Centers the table horizontally */
  width: 100%; /* Full width of its parent */
  max-width: 1000px; /* Optional: Sets a max width for the container */
  overflow-x: auto; /* Ensures content is scrollable horizontally if it overflows */
  margin: 0 auto; /* Centers the container itself if it has a max-width */
  margin-top: 20px;

}

.leave-section tr{
  cursor: pointer;
}

.leave-details {
  cursor:default;
}

#leaveBtns{
  display: flex;
}

.leave-section button{
 padding: 15px; 
flex: 1;
border: none;
background-color: #782dc98a;
color: white;
font-size: 20px;
margin: 10px;
box-shadow: inset 0 3px 6px rgba(0,0,0,0.1);
}

.approveBtn:hover,.rejectBtn:hover{
  background-color: #711bcd;
}

#leaveDetails strong{
 margin-right: 10px;
 color: #f1c03dde;
}
#leaveDetails{
  justify-content: left;
  text-align: left;
  margin-top: 20px;
  /* font-weight: bolder; */
  color: white;
}

.leave_table_class tr.non-hoverable:hover{
  background-color:inherit   ;
}

.leave_table_class tr:hover{
  background-color: #9d15f6eb;
}

 .attendance-page{
  position: relative;
   left: 10%; 
  width: 90%;
} 
  #checkAttendance{
  /* display: flex; */
   justify-content: center;
  margin-top: 20px;
  width: 40%;
    /* max-width: 600px; */
    margin: 20px auto;
    padding: 30px;
    background-color: #fff;
    border: 2px solid #37023f;
    border-radius: 20px;
    box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.2);
    text-align: center;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    
} 
#studentAttendanceTable{
  color: white;
  border-radius: 20px;
  width: 40%;
  margin: 0 auto;
  text-align: center;
  background-color: #a258c7cb;
  margin-bottom: 80px;
  padding-bottom:30px ;
  padding-top:30px ;
}
#studentAttendanceTable table{
  border-collapse: collapse;
  margin: auto;
  margin-top: 20px;
}

#studentAttendanceTable th,td{
  padding: 10px;
    /* border-bottom: 1px solid #ddd; */
    color: white;
    background-color: #a378d194;
    text-align: center;

    border: 1px solid #dddddd7d;
}


#studentAttendanceTable th{
  background-color: #782dc9;
  color: #fff;
  padding: 10px;
  align-items: center;
  justify-content: center;
  text-align: center;
}

.attendance-page select{
  display: inline;
  margin-right: 40px;
  padding: 15px 25px 15px 25px ;
  background-color: #ece6e6;
  border: 1px solid #782dc9a9;
  border-radius: 10px;
  color: rgba(15, 13, 13, 0.779);
  /* box-shadow: inset 0 3px 6px rgba(0,0,0,0.1); */
  
}
.attendance-page button{
  padding: 10px; 
  border: none;
  background-color: #782dc9a9;
  color: white;
  font-size: 20px;
  margin: 20px;
  margin-top: 40px;
  /* box-shadow: inset 0 3px 6px rgba(0,0,0,0.1); */
  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.10);
}
.attendance-page button:hover,.attendance-page button:active,.attendance-page button:focus {
  background-color: #7640b0;
  border: #3f1fb2cb;
  cursor: pointer;
}
.attendance-page select:hover{
  background-color: #782dc95d;
  color: black;
}

#selectionOfRoll{
  /* border: solid 1px black; */
  padding: 20px 0px 20px 0px;
  border-radius:10px ;
  background-color: #ece6e6;
  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
  }


================================================================================

Filename: static/CSS/facultySidebar.css
Content:
@import url('https://fonts.googleapis.com/css2?family=Open+Sans&display=swap');

*{
    list-style: none;
    text-decoration: none;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Open Sans', sans-serif;
}

body{
    background: #f5f6fa;
}

.wrapper .sidebar{
    background: #170848d9;
    position: fixed;
    top: 0;
    left: 0;
    width: 235px;
    height: 100%;
    padding: 20px 0;
    z-index: 1000;
    transition: all 0.5s ease;
}

.wrapper .sidebar .profile{
  margin-bottom: 30px;
  text-align: center;
}

.wrapper .sidebar .profile img{
  display: block;
  width: 100px;
  height: 100px;
  border-radius: 40%;
  margin: 0 auto;
}

.wrapper .sidebar .profile h3{
  color: #ffffff;
  margin: 10px 0 5px;
}

.wrapper .sidebar .profile p{
  color: rgb(206, 240, 253);
  font-size: 14px;
}

.wrapper .sidebar ul li a{
  display: block;
  padding: 13px 30px;
  border-bottom: 1px solid #10558d;
  color: rgb(241, 237, 237);
  font-size: 16px;
  position: relative;
  -moz-user-select: -moz-none;
  -khtml-user-select: none;
  -webkit-user-select: none;
}

.wrapper .sidebar ul li a .icon{
  color: #dee4ec;
  width: 30px;
  display: inline-block;
}


.wrapper .sidebar ul li a:hover,
.wrapper .sidebar ul li a.active{
    color: #0c7db1;

    background:white;
    border-right: 2px solid rgb(5, 68, 104);
}

.wrapper .sidebar ul li a:hover .icon,
.wrapper .sidebar ul li a.active .icon{
    color: #59a0c4;
    
}

.wrapper .sidebar ul li a:hover:before,
.wrapper .sidebar ul li a.active:before{
    display: block;
}

.wrapper .section{
  width: calc(100% - 225px);
  margin-left: 225px;
  transition: all 0.5s ease;
}

.wrapper .section .top_navbar{
   /* background: rgb(7, 105, 185);  */
  color: black  ;
  height: 50px;
  display: flex;
  align-items: center;
  padding: 0 30px;

}

.wrapper .section .top_navbar .hamburger a{
  font-size: 28px;
  color: #070707;
}

.wrapper .section .top_navbar .hamburger a:hover{
  color: #a2ecff;
}

body.active .wrapper .sidebar{
  left: -225px;
}

body.active .wrapper .section{
  margin-left: 0;
  width: 100%;
}

/* .navbtn{
  border: none;
  background-color:transparent;
  color: #f9f9f9;
  padding:3px 30px
  


}
.wrapper .sidebar ul li a:hover .navbtn,
.wrapper .sidebar ul li a.active .navbtn{
  color: #0f0f0f;
} */

================================================================================

Filename: static/CSS/login.css
Content:
/* @import url(https://fonts.googleapis.com/css?family=Roboto:300); */

body {
  margin: 0;
  padding: 0;
  font-family: Arial, sans-serif;
  /* background-image: url('..\Images\backgroundLogin.jpg'); */
  /* background-image: src('../Images/backgroundLogin.jpg'); */
  background: linear-gradient(to right,rgba(59, 127, 230, 0.404),rgba(251, 251, 251, 0.509), rgba(245, 120, 120, 0.272));
  background-size: cover;
  background-position: center;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

.login-page {
  width: 360px;
  padding: 8% 0 0;
  margin: auto;
}
.form {
  position: relative;
  z-index: 1;
  background: #FFFFFF;
  max-width: 360px;
  margin: 0 auto 100px;
  padding: 45px;
  text-align: center;
  box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
}
.form input {
  font-family: "Roboto", sans-serif;
  outline: 0;
  background: #debedb53;
  width: 100%;
  border: 0;
  color: #000000b4;
  margin: 0 0 15px;
  padding: 15px;
  box-sizing: border-box;
  font-size: 14px;
  font-weight: bold;
}
.form button {
  font-family: "Roboto", sans-serif;
  text-transform: uppercase;
  outline: 0;
  background: #f075d5a8;
  width: 100%;
  border: 0;
  padding: 15px;
  color: #ffffff;
  font-size: 15px;
  /* font-weight: bolder; */
  -webkit-transition: all 0.3 ease;
  transition: all 0.3 ease;
  cursor: pointer;
}
.form button:hover,.form button:active,.form button:focus {
  background: #f075d5e0;
} 

#heading{
  /* color: #dd23e7; */
  /* opacity: 0.8; */
  /* color: #fefefe; */ 
  color: transparent;
  font-size: 45px;
  font-weight: bolder;
  background: linear-gradient(to right,pink, rgb(95, 95, 222));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  /* -webkit-transition: all 0.3 ease;
  transition: all 0.3 ease;
  cursor: pointer; */

}



================================================================================

Filename: static/CSS/student.css
Content:
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 0;
    background-image: url('../Images/backgroundStudent.jpg');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
}

header {
    color: #ffffff;
    text-align: center;
    font-size: 22px;
    padding: 26px 0;
}

h1 {
    margin: 0;
}

@media only screen and (max-width: 360px) and (max-height: 800px) {
    body {
        font-size: 14px;
    }

    .container {
        width: 100%;
    }
}

@media only screen and (min-width: 601px) and (max-width: 1200px) {
    body {
        font-size: 16px;
    }
}

nav {
    display: flex;
    justify-content: center;
    background-color: rgba(40, 55, 71, 0.8);
    padding: 15px 0;
}

nav button {
    text-decoration: none;
    color: #ffffff;
    font-size: 19px;
    font-weight: bolder;
    border-radius: 10px;
    padding: 12px 20px;
    margin: 0 10px;
    transition: background-color 0.3s ease;
    border: none;
}

nav button:nth-child(1) {
    background-color: #3f8bbe8c;
}

nav button:nth-child(2) {
    background-color: #3f8bbe8c;
}

nav button:nth-child(3) {
    background-color: #3f8bbe8c;
}

nav button:nth-child(4) {
    background-color: #3f8bbe8c;
}

nav button:nth-child(5) {
    background-color: #3f8bbe8c;
}

nav button:hover {
    background-color: #125f92;
    color: #ffffff;
}

section.Attendance-Section {
    padding: 30px;
    padding-bottom: 35px;
    text-align: center;
}

.Attendance-Section {
    padding: 30px;
    text-align: center;
    border: 2px solid #3498db;
    border-radius: 20px;
    background-color: #fff;
    box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.2);
    width: 50%;
    margin: 20px auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

#attendanceBtnContainer {
    margin-bottom: 20px;
}

#attendanceBtnContainer button {
    background-color: #125f92;
    color: #fff;
    border: none;
    border-radius: 10px;
    padding: 15px 30px;
    font-size: 18px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

#attendanceBtnContainer button:hover {
    background-color: #0d4d7a;
}

#progressBar {
    width: 100%;
    background-color: #c5c7ca;
    border-radius: 7px;
}

#progressBar .bar {
    height: 20px;
    text-align: center;
    line-height: 20px;
    color: #ffffff;
    border-radius: 15px;
    transition: width 0.5s ease-in-out, background-color 0.5s ease;
}

#progressBar .bar.green {
    background-color: #4CAF50;
}

#progressBar .bar.red {
    background-color: #ff0000;
}

#progressBar .bar.blue {
    background-color: #2196F3;
}


#attendanceTable {
    margin-top: 20px;
    border-collapse: collapse;
}

#attendanceTable th,
#attendanceTable td {
    padding: 10px;
    border-bottom: 1px solid #ddd;
}

#attendanceTable th {
    background-color: #125f92;
    color: #fff;
    padding: 10px;
    align-items: center;
    justify-content: center;
    text-align: center;
}

#attendanceTable th:first-child {
    border-top-left-radius: 5px;
}

#attendanceTable th:last-child {
    border-top-right-radius: 5px;
}

#attendanceTable tr:last-child td {
    border-bottom: none;
}

footer {
    text-align: center;
    padding: 10px;
    background-color: rgba(40, 55, 71, 0.8);
    color: #fff;
    position: fixed;
    bottom: 0;
    width: 100%;
}

.leave-section {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 20px auto;
    width: 100%;
}

#leaveFormContainer {
    background-color: #fff;
    border: 2px solid #3498db;
    border-radius: 20px;
    padding: 30px;
    box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.2);
    width: 80%;
    max-width: 600px;
    margin: 0 auto;
}

#leaveFormContainer h3 {
    text-align: center;
    margin-bottom: 20px;
}

#leaveFormContainer .form-group {
    margin-bottom: 15px;
}

#leaveFormContainer label {
    display: block;
    font-weight: bold;
    margin-bottom: 5px;
}

#leaveFormContainer select,
#leaveFormContainer input[type="date"],
#leaveFormContainer textarea {
    width: 100%;
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
    box-sizing: border-box;
    font-size: 16px;
}

#leaveFormContainer button[type="submit"] {
    background-color: #125f92;
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 15px 30px;
    font-size: 18px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

#leaveFormContainer button[type="submit"]:hover {
    background-color: #0d4d7a;
}body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 0;
    background-image: url('../Images/backgroundStudent.jpg');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
}

header {
    color: #ffffff;
    text-align: center;
    font-size: 22px;
    padding: 26px 0;
}

h1 {
    margin: 0;
}

@media only screen and (max-width: 360px) and (max-height: 800px) {
    body {
        font-size: 14px;
    }

    .container {
        width: 100%;
    }
}

@media only screen and (min-width: 601px) and (max-width: 1200px) {
    body {
        font-size: 16px;
    }
}

nav {
    display: flex;
    justify-content: center;
    background-color: rgba(40, 55, 71, 0.8);
    padding: 15px 0;
}

nav button {
    text-decoration: none;
    color: #ffffff;
    font-size: 19px;
    font-weight: bolder;
    border-radius: 10px;
    padding: 12px 20px;
    margin: 0 10px;
    transition: background-color 0.3s ease;
    border: none;
}

nav button:nth-child(1) {
    background-color: #3f8bbe8c;
}

nav button:nth-child(2) {
    background-color: #3f8bbe8c;
}

nav button:nth-child(3) {
    background-color: #3f8bbe8c;
}

nav button:nth-child(4) {
    background-color: #3f8bbe8c;
}

nav button:nth-child(5) {
    background-color: #3f8bbe8c;
}

nav button:hover {
    background-color: #125f92;
    color: #ffffff;
}

section.Attendance-Section {
    padding: 30px;
    text-align: center;
}

.Attendance-Section {
    padding: 30px;
    text-align: center;
    border: 2px solid #3498db;
    border-radius: 20px;
    background-color: #fff;
    box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.2);
    width: 50%;
    margin: 20px auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

#attendanceBtnContainer {
    margin-bottom: 20px;
}

#attendanceBtnContainer button {
    background-color: #125f92;
    color: #fff;
    border: none;
    border-radius: 10px;
    padding: 15px 30px;
    font-size: 18px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

#attendanceBtnContainer button:hover {
    background-color: #0d4d7a;
}

#progressBar {
    width: 100%;
    background-color: #c5c7ca;
    border-radius: 7px;
}

#progressBar .bar {
    height: 20px;
    text-align: center;
    line-height: 20px;
    color: #ffffff;
    border-radius: 15px;
    transition: width 0.5s ease-in-out, background-color 0.5s ease;
}

#progressBar .bar.green {
    background-color: #4CAF50;
}

#progressBar .bar.red {
    background-color: #ff0000;
}

#progressBar .bar.blue {
    background-color: #2196F3;
}


#attendanceTable {
    display: table;
    margin: auto;
    margin-top: 20px;
    border-collapse: collapse;
}

#attendanceTable th,
#attendanceTable td {
    padding: 10px;
    border-bottom: 1px solid #ddd;
}

#attendanceTable th {
    background-color: #125f92;
    color: #fff;
    padding: 10px;
    align-items: center;
    justify-content: center;
    text-align: center;
}

#attendanceTable th:first-child {
    border-top-left-radius: 5px;
}

#attendanceTable th:last-child {
    border-top-right-radius: 5px;
}

#attendanceTable tr:last-child td {
    border-bottom: none;
}

footer {
    text-align: center;
    padding: 10px;
    background-color: rgba(40, 55, 71, 0.8);
    color: #fff;
    position: fixed;
    bottom: 0;
    width: 100%;
}



.leave-section h2 {
    margin-bottom: 20px;
}

#leaveTable {

    width: 80%;
    max-width: 800px; /* Adjust the maximum width as needed */
    border-collapse: collapse;
    margin: 0 auto 20px; /* Center the table horizontally */
    color: #120966;
}

#leaveTable th,
#leaveTable td {

    padding: 10px;
    text-align: left;
    border: 1px solid #ffffff;
    color: #120966;

}

#leaveTable th {
    color: #ffffff;
   background-color: #252584;

}
#leaveTable td{

color: #ffffff;
   background-color: #3f8bbe8c;
   
}
#leaveTable tbody tr:hover{
    cursor: pointer;
    background-color:#1469a1df ;
    
}

.leave-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 20px;
}

.leave-section h2 {
    text-align: center;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size: 28px;
    color: #ffffff;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
    margin-bottom: 30px;
    display: block;
    padding: 10px 20px;
    background-color: #1d146d;
    border-radius: 5px;
    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
    max-width: fit-content;
    margin: 0 auto 30px;
}
#leaveDetails {
    width: 80%;
    max-width: 600px;
    margin: 20px auto;
    padding: 30px;
    background-color: #fff;
    border: 2px solid #3498db;
    border-radius: 20px;
    box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.2);
    text-align: center;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

#leaveDetails h3 {
    color: #125f92;
    font-size: 24px;
    margin-bottom: 20px;
}

#leaveDetails p {
    font-size: 16px;
    line-height: 1.5;
    margin-bottom: 10px;
}

#leaveDetails strong {
    color: #125f92;
    font-weight: bold;
}

#leaveDetails span {
    font-weight: normal;
}
#leaveFormContainer {
    width: 80%;
    max-width: 600px; /* Adjust as needed */
    margin: 0 auto; /* Center the form container horizontally */
}

#leaveFormContainer form {
    width: 100%;
}
#leaveFormContainer {
    background-color: #fff;
    border: 2px solid #3498db;
    border-radius: 20px;
    padding: 30px;
    box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.2);
    width: 80%;
    max-width: 600px;
    margin: 0 auto;
}

#leaveFormContainer h3 {
    text-align: center;
    margin-bottom: 20px;
}

#leaveFormContainer .form-group {
    margin-bottom: 15px;
}

#leaveFormContainer label {
    display: block;
    font-weight: bold;
    margin-bottom: 5px;
}

#leaveFormContainer select,
#leaveFormContainer input[type="date"],
#leaveFormContainer textarea {
    width: 100%;
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
    box-sizing: border-box;
    font-size: 16px;
}

#leaveFormContainer button[type="submit"] {
    background-color: #125f92;
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 15px 30px;
    font-size: 18px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

#leaveFormContainer button[type="submit"]:hover {
    background-color: #0d4d7a;
}


================================================================================

Filename: static/CSS/studentSidebar.css
Content:
/* @import url('https://fonts.googleapis.com/css2?family=Open+Sans&display=swap'); */


*{
    list-style: none;
    text-decoration: none;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Open Sans', sans-serif;
}



.wrapper .sidebar{
    background-color:#406384fa  ;
    position: fixed;
    top: 0;
    left: 0;
    width: 230px;
    height: 100%;
    padding: 20px 0;
    transition: all 0.5s ease;
}

.wrapper .sidebar .profile{
  margin-bottom: 30px;
  text-align: center;
}

.wrapper .sidebar .profile img{
  display: block;
  width: 80px;
  height: px;
  border-radius: 40%;
  margin: 0 auto;
}

.wrapper .sidebar .profile h3{
  color: #ffffff;
  margin: 10px 0 5px;
}

.wrapper .sidebar .profile p{
  color: rgb(255, 255, 255);
  font-size: 18px;
}

.wrapper .sidebar ul li a{
  display: block;
  padding: 13px 30px;
  border-bottom: 1px solid #8dc5f3;
  color: rgb(241, 237, 237);
  font-size: 16px;
  position: relative;
  /* -moz-user-select: -moz-none;
  -khtml-user-select: none;
  -webkit-user-select: none; */
}

.wrapper .sidebar ul li a .icon{
  color: #dcd3d3;
  width: 30px;
  display: inline-block;
}


.wrapper .sidebar ul li a:hover,
.wrapper .sidebar ul li a.active{
    color: #ffffff;
    border-right: 2px solid white;
    background:#36386dd6;
}

.wrapper .sidebar ul li a:hover .icon,
.wrapper .sidebar ul li a.active .icon{
    color: #ffffff;
    
}

.wrapper .sidebar ul li a:hover:before,
.wrapper .sidebar ul li a.active:before{
    display: block;
}

.wrapper .section{
  width: calc(100% - 225px);
  margin-left: 225px;
  transition: all 0.5s ease;
}

.wrapper .section .top_navbar{
   /* background: rgb(7, 105, 185);  */
  color: black  ;
  height: 50px;
  display: flex;
  align-items: center;
  padding: 0 30px;

}

.wrapper .section .top_navbar .hamburger a{
  font-size: 28px;
  color: #070707;
}

.wrapper .section .top_navbar .hamburger a:hover{
  color: #a2ecff;
}

body.active .wrapper .sidebar{
  left: -225px;
}

body.active .wrapper .section{
  margin-left: 0;
  width: 100%;
}

/* .navbtn{
  border: none;
  background-color:transparent;
  color: #f9f9f9;
  padding:3px 30px
  


}
.wrapper .sidebar ul li a:hover .navbtn,
.wrapper .sidebar ul li a.active .navbtn{
  color: #0f0f0f;
} */

================================================================================

Filename: static/Images/backgroundFaculty.jpg
Content:
[Binary file - cannot display content]


Filename: static/Images/backgroundLogin.jpg
Content:
[Binary file - cannot display content]


Filename: static/Images/backgroundStudent.jpg
Content:
[Binary file - cannot display content]


Filename: static/Scripts/admin.js
Content:
document.addEventListener('DOMContentLoaded', function () {

    fetch('/find_greatest_user_id')
        .then(response => {
            if (response.ok) {
                return response.json();
            } else {
                throw new Error('Failed to fetch greatest user ID');
            }
        })
        .then(data => {
            document.getElementById('UserId').textContent = data.greatest_user_id + 1;
        })
        .catch(error => {
            console.error('Error:', error);
        });
    // Add event listener to the add member form
    const addMemberForm = document.getElementById('addMemberForm');

    addMemberForm.addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent the default form submission behavior

        // Gather the form data
        const formData = {
            memberType: document.getElementById('memberType').value,
            name: document.getElementById('name').value,
            email: document.getElementById('email').value,
            passwd: document.getElementById('passwd').value
        };
        // Send a POST request to the Flask endpoint
        fetch('/add_member', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to add member');
                }
            })
            .then(data => {

                const successMessage = document.getElementById('successMessage');
                successMessage.textContent = 'Member added successfully!';
                successMessage.style.display = 'block';
                // You can optionally redirect or display a success message here
            })
            .catch(error => {
                // Handle errors
                console.error('Error:', error);
                // You can display an error message to the user here
            });
    });
});

document.addEventListener('DOMContentLoaded', function () {
    const removeMemberForm = document.getElementById('removeMemberForm');
    const confirmationSection = document.getElementById('confirmationSection');
    const memberDetails = document.getElementById('memberDetails');
    const successMessage = document.getElementById('successMessage');

    removeMemberForm.addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent the default form submission behavior

        // Gather the form data
        const memberIDToRemove = document.getElementById('memberIDToRemove').value;

        // Send a POST request to the Flask endpoint to get member details
        fetch(`/get_member_details?userId=${memberIDToRemove}`)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch member details');
                }
            })
            .then(data => {
                console.log(data);
                // Display member details in the confirmation section
                memberDetails.innerHTML = ``;
                if (data.member_details) {
                    // Additional member details based on member type (student or faculty)
                    if (data.user.userType === 'Student') {
                        memberDetails.innerHTML += `<p>Name: ${data.member_details.studentName}</p><p>Email: ${data.user.userName}</p><p>Student ID: ${data.member_details.studentId}</p>`;
                    } else if (data.user.userType === 'Faculty') {
                        memberDetails.innerHTML += `<p>Name: ${data.member_details.facultyName}</p><p>Email: ${data.user.userName}</p><p>Student ID: ${data.member_details.facultyId}</p>`;
                    }
                }
                confirmationSection.style.display = 'block';
            })
            .catch(error => {
                document.getElementById('successMessageRm').innerText = 'Incorrect UserId';
                document.getElementById('successMessageRm').style.display = 'block';
            });

    });

    document.getElementById('confirmBtn').addEventListener('click', function () {
        // Assuming memberIDToRemove is the ID of the member to be removed
        const memberIDToRemove = document.getElementById('memberIDToRemove').value;
        // Send a POST request to the Flask endpoint to remove the member
        fetch('/remove_member', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({userId: memberIDToRemove})
        })
            .then(response => {
                if (response.ok) {
                    // Hide the confirmation section
                    document.getElementById('confirmationSection').style.display = 'none';
                    // Show success message
                    document.getElementById('successMessageRm').innerText = 'Member removed successfully.';

                    document.getElementById('successMessageRm').style.display = 'block';
                } else {
                    throw new Error('Failed to remove member');
                }
            })
            .catch(error => {
                // Handle errors
                console.error('Error:', error);
                // You can display an error message to the user here
                document.getElementById('successMessageRm').innerText = 'Failed to remove member. Please try again later.';

                document.getElementById('successMessageRm').style.display = 'block';
            });
    });


    document.getElementById('cancelBtn').addEventListener('click', function () {
        confirmationSection.style.display = 'none'; // Hide the confirmation section
    });
});
document.addEventListener('DOMContentLoaded', function () {
    const addSubjectForm = document.getElementById('AddSubjectForm');
    const confirmationSection = document.getElementById('confirmationSectionAs');
    const subjectDetails = document.getElementById('subjectDetails');
    const successMessage = document.getElementById('successMessageAs');
    const facultyAttendancePercentage = document.getElementById('facultyAttendancePercentage');

    addSubjectForm.addEventListener('submit', function (event) {
        event.preventDefault();
        const userID = document.getElementById('AddSubjectID').value;
        const subjectName = document.getElementById('subjectName').value;

        fetch(`/get_member_details?userId=${userID}`)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch user details');
                }
            })
            .then(data => {
                    console.log(data);
                    subjectDetails.innerHTML = ``;
                    if (data.member_details) {
                        // Additional member details based on member type (student or faculty)
                        if (data.user.userType === 'Student') {
                            subjectDetails.innerHTML += `<p>Name: ${data.member_details.studentName}</p><p>Email: ${data.user.userName}</p><p>Student ID: ${data.member_details.studentId}</p>`;
                        } else if (data.user.userType === 'Faculty') {
                            const attendancePercentage = prompt('Enter attendance percentage for the subject:');
                            if (attendancePercentage) {
                                facultyAttendancePercentage.value = attendancePercentage;
                                confirmationSection.style.display = 'block';
                                subjectDetails.innerHTML += `<p>Name: ${data.member_details.facultyName}</p><p>Email: ${data.user.userName}</p><p>Percentage: ${attendancePercentage}%</p>`;
                            }
                        }
                    }
                    confirmationSection.style.display = 'block';
                }
            )
            .catch(error => {
                // Handle errors
                console.error('Error:', error);
                // You can display an error message to the user here
            });
    });

    document.getElementById('confirmBtnAs').addEventListener('click', function () {
        // Gather the form data
        const userID = document.getElementById('AddSubjectID').value;
        const subjectName = document.getElementById('subjectName').value;
        const attendancePercentage = facultyAttendancePercentage.value;

        // Send a POST request to add the subject
        fetch('/add_subject', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_id: userID,
                subject_name: subjectName,
                attendance_percentage: attendancePercentage
            })
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to add subject');
                }
            })
            .then(data => {
                successMessage.innerText = 'Subject added successfully!';
                successMessage.style.display = 'block';
            })
            .catch(error => {
                // Handle errors
                console.error('Error:', error);
                // You can display an error message to the user here
            });
    });

    document.getElementById('cancelBtnAs').addEventListener('click', function () {
        confirmationSection.style.display = 'none'; // Hide the confirmation section
    });
});

document.addEventListener('DOMContentLoaded', function () {
    const removeSubjectForm = document.getElementById('RemoveSubjectForm');
    const removeSubjectUserId = document.getElementById('removeSubjectUserId');
    const removeSubjectName = document.getElementById('removeSubjectName');

    removeSubjectUserId.addEventListener('change', function () {
        const userId = removeSubjectUserId.value;
        // Fetch subjects corresponding to the selected user ID
        fetch(`/get_subjects?userId=${userId}`)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch subjects');
                }
            })
            .then(data => {
                // Clear existing options
                removeSubjectName.innerHTML = '';
                // Populate dropdown with fetched subjects
                data.subjects.forEach(subject => {
                    const option = document.createElement('option');
                    option.value = subject;
                    option.textContent = subject;
                    removeSubjectName.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error:', error);
                // You can display an error message to the user here
            });
    });

    removeSubjectForm.addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent the default form submission behavior
        const userId = removeSubjectUserId.value;
        const subjectName = removeSubjectName.value;

        // Send a POST request to remove the subject
        fetch('/remove_subject', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ userId, subjectName })
        })
            .then(response => {
                if (response.ok) {
                    removeSubjectForm.reset();
                } else {
                    throw new Error('Failed to remove subject');
                }
            })
            .catch(error => {
                // Handle errors
                console.error('Error:', error);
                // You can display an error message to the user here
            });
    });
});




================================================================================

Filename: static/Scripts/faculty.js
Content:
let selected_subject;
document.addEventListener('DOMContentLoaded', function () {
    // Retrieve the user ID from the URL query parameter
    const urlParams = new URLSearchParams(window.location.search);
    const userID = urlParams.get('userID');

    // document.querySelector("wrapper").style.display="block";
    function fetchFacultyDetails() {
        fetch('/getFacultyDetails?userID=' + userID) // Replace with your actual endpoint to fetch faculty details
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch faculty details');
                }
            })
            .then(faculty => {
                // Populate the faculty details on the webpage
                document.getElementById('facultyName').innerText = faculty.facultyName;
                document.getElementById('facultyEmail').innerText = faculty.email;
                document.getElementById('facultyID').innerText = "ID: " + faculty.facultyId;
                // Add more fields as needed
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }


    function fetchSubjectButtons() {
        fetch('/getFacultySubjects?userID=' + userID) // Replace with your actual endpoint to fetch faculty subjects
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch faculty subjects');
                }
            })
            .then(subjects => {
                // Populate subject buttons on the webpage
                const nav = document.getElementById('subjectNav');
                subjects.forEach((subject, index) => {
                    const button = document.createElement('button');
                    button.id = `subject-${index}`;
                    button.textContent = subject.subject;
                    button.addEventListener('click', function () {
                        selected_subject = subject.subject;
                        let attendanceSection = document.querySelector(".attendance-section");
                        if (attendanceSection.style.display === "block") {
                            fetchStudentUserIDs(subject.subject);
                        }
                        let defaulter = document.querySelector(".defaulters");
                        if (defaulter.style.display === "block") {
                            fetchDefaulters(subject.subject);
                        }
                        let att = document.querySelector(".attendance-page");
                        if (att.style.display === "block") {
                            fetchAttendance(subject.subject);
                        }
                    });
                    nav.appendChild(button);
                });
                document.getElementById("subject-0").click();
            })
            .catch(error => {
                console.error('Error:', error);
                // Handle error, e.g., display error message to the user
            });
    }

    fetchFacultyDetails();
    setTimeout(fetchSubjectButtons, 1000);

    let userIDIndex = 0;
    let studentUserIDs = [];

    function fetchStudentUserIDs(subject) {
        fetch('/getStudentUserIDs?subject=' + subject)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch student user IDs');
                }
            })
            .then(data => {
                studentUserIDs = data;
                updateStudentDetails();
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function updateStudentDetails() {
        const userID = studentUserIDs[userIDIndex];
        fetch('/getStudentDetails?userID=' + userID)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch student details');
                }
            })
            .then(student => {
                // Populate student details on the webpage
                document.getElementById('studentName').innerText = student.studentName;
                document.getElementById('rollNumber').innerText = student.studentId;
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }


    document.querySelector('.nextBtn').addEventListener('click', function () {
        userIDIndex = (userIDIndex + 1) % studentUserIDs.length;
        const previousMessageDiv = document.querySelector('.submit').nextElementSibling;
        if (previousMessageDiv) {
            previousMessageDiv.remove();
        }
        updateStudentDetails(); // Update student details
    });

    // Event listener for the "Back" button
    document.querySelector('.backBtn').addEventListener('click', function () {
        userIDIndex = (userIDIndex - 1 + studentUserIDs.length) % studentUserIDs.length; // Decrement the index
        const previousMessageDiv = document.querySelector('.submit').nextElementSibling;
        if (previousMessageDiv) {
            previousMessageDiv.remove();
        }
        updateStudentDetails(); // Update student details
    });
    document.querySelector('.submit').addEventListener('click', function () {
        const studentID = document.getElementById('rollNumber').innerText;

        //check if date is selected
        const date = document.getElementById('date').value;
        if (!date) {
            alert('Please select a date');
            return;
        }

        // Get the selected attendance status from the radio buttons
        let status;

        // Check which radio button is selected
        if (document.getElementById('present').checked) {
            status = 'Present';
        } else if (document.getElementById('absent').checked) {
            status = 'Absent';
        } else {
            // Handle the case where neither radio button is selected
            alert('Please select attendance status');
            return; // Stop execution if attendance status is not selected
        }

        const data = {
            'faculty_id': userID, 'student_id': studentID, 'subject': selected_subject, 'date': date, 'status': status
        };

        fetch('/markAttendance', {
            method: 'POST', headers: {
                'Content-Type': 'application/json'
            }, body: JSON.stringify(data)
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to mark attendance');
                }
            })
            .then(data => {
                const previousMessageDiv = document.querySelector('.submit').nextElementSibling;
                if (previousMessageDiv) {
                    previousMessageDiv.remove();
                }
                const messageDiv = document.createElement('div');
                messageDiv.style.marginTop = '15px';
                messageDiv.style.color = 'green';
                messageDiv.textContent = data.message; // Assuming the response contains a 'message' field
                document.querySelector('.submit').insertAdjacentElement('afterend', messageDiv);
            })
            .catch(error => {
                console.error('Error:', error);
            });
    });

    function markAttendance() {

        document.querySelector(".mark").classList.add("active");
        document.querySelector(".leave").classList.remove("active");
        document.querySelector(".defaulter_button").classList.remove("active")
        document.querySelector(".logout").classList.remove("active");
        document.querySelector(".show_attendance").classList.remove("active");
        let leaveSection = document.querySelector(".leave-section");
        if (leaveSection.style.display === "block") {
            leaveSection.style.display = "none";
        }
        let attendanceSection = document.querySelector(".attendance-section");
        if (attendanceSection.style.display === "none") {
            document.querySelector(".nextBtn").style.display = "block";
            document.querySelector(".backBtn").style.display = "block";
            attendanceSection.style.display = "block";
        }
        let defaulter = document.querySelector(".defaulters");
        if (defaulter.style.display === "block") {
            defaulter.style.display = "none";
        }
        let att = document.querySelector(".attendance-page");
        if (att.style.display === "block") {
            att.style.display = "none";
        }
        document.getElementById("subject-0").click();
    }

    function leaveApplication() {

        document.querySelector(".mark").classList.remove("active");
        document.querySelector(".leave").classList.add("active");
        document.querySelector(".defaulter_button").classList.remove("active")
        document.querySelector(".show_attendance").classList.remove("active");
        document.querySelector(".logout").classList.remove("active");
        let attendanceSection = document.querySelector(".attendance-section");
        if (attendanceSection.style.display === "block") {
            attendanceSection.style.display = "none";
            document.querySelector(".nextBtn").style.display = "none";
            document.querySelector(".backBtn").style.display = "none";
        }
        let leaveSection = document.querySelector(".leave-section");
        if (leaveSection.style.display === "none") {
            leaveSection.style.display = "block";
        }
        let defaulter = document.querySelector(".defaulters");
        if (defaulter.style.display === "block") {
            defaulter.style.display = "none";
        }
        let att = document.querySelector(".attendance-page");
        if (att.style.display === "block") {
            att.style.display = "none";
        }
        fetchLeaveApplication();
    }

    function fetchLeaveApplication() {

        fetch('/getLeaveApplication?userID=' + userID)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch leave application');
                }
            })
            .then(leaveApplication => {
                console.log(leaveApplication)
                const tableBody = document.querySelector('#leave_table tbody');
                if (tableBody) {
                    detachLeaveDetailsRow();
                    tableBody.innerHTML = '';
                } else {
                    console.error('Table body not found');
                }

                leaveApplication.forEach(application => {
                    console.log(application);
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                    <td>${application.applicationId}</td>
                    <td>${application.subject}</td>
                    <td>${application.studentId}</td>
                    <td>${application.studentName}</td>
                    <td>${application.status}</td>
                    `;
                    tr.addEventListener('click', function () {
                        reattachLeaveDetailsRow();
                        showLeaveDetails(application);
                    });
                    if (tableBody.firstChild) {
                        tableBody.insertBefore(tr, tableBody.firstChild);
                    } else {
                        tableBody.appendChild(tr);
                    }
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }


    const leaveDetailsRow = document.getElementById('some');

    function detachLeaveDetailsRow() {
        if (leaveDetailsRow.parentNode) {
            leaveDetailsRow.parentNode.removeChild(leaveDetailsRow);
        }
    }

    function reattachLeaveDetailsRow() {
        const tableBody = document.querySelector('#leave_table tbody');
        if (tableBody) {
            tableBody.appendChild(leaveDetailsRow);
        }
    }


    function showLeaveDetails(application) {
        document.getElementById('leaveAppID').textContent = application.applicationId;
        document.getElementById('leaveSubject').textContent = application.subject;
        document.getElementById('leaveStudentID').textContent = application.studentId;
        document.getElementById('leaveStudentName').textContent = application.studentName;
        document.getElementById('leaveSDate').textContent = application.start_date.substring(0, 16);
        document.getElementById('leaveEDate').textContent = application.end_date.substring(0, 16);
        document.getElementById('leaveReason').textContent = application.reason;
        document.getElementById('leaveStatus').textContent = application.status;
        //  document.getElementById('leaveDetails').style.display = 'block';
        //  document.getElementById('leaveBtns').style.display = 'block';
        document.getElementById('some').style.display = "";
    }

    document.querySelector('.approveBtn').addEventListener('click', function () {
        approveLeave();
        setTimeout(fetchLeaveApplication, 1000);
    });

    document.querySelector('.rejectBtn').addEventListener('click', function () {
        rejectLeave();
        setTimeout(fetchLeaveApplication, 1000);
    });

    // Close the dropdown if the user clicks outside of it
    function defaulters() {

        document.querySelector(".mark").classList.remove("active");
        document.querySelector(".leave").classList.remove("active");
        document.querySelector(".defaulter_button").classList.add("active")
        document.querySelector(".show_attendance").classList.remove("active");
        document.querySelector(".logout").classList.remove("active");
        let attendanceSection = document.querySelector(".attendance-section");
        if (attendanceSection.style.display === "block") {
            attendanceSection.style.display = "none";
            document.querySelector(".nextBtn").style.display = "none";
            document.querySelector(".backBtn").style.display = "none";
        }
        let leaveSection = document.querySelector(".leave-section");
        if (leaveSection.style.display === "block") {
            leaveSection.style.display = "none";
        }
        let defaulter = document.querySelector(".defaulters");
        if (defaulter.style.display === "none") {
            defaulter.style.display = "block";
        }
        let att = document.querySelector(".attendance-page");
        if (att.style.display === "block") {
            att.style.display = "none";
        }
        document.getElementById("subject-0").click();
    }

    function approveLeave() {
        const applicationId = document.getElementById('leaveAppID').textContent;
        // Call API to approve the leave application with the provided applicationId
        fetch('/approveLeave', {
            method: 'POST', headers: {
                'Content-Type': 'application/json'
            }, body: JSON.stringify({applicationId})
        })
            .then(response => {
                if (response.ok) {
                    console.log('Leave application approved successfully');
                    // Optionally, update UI or perform other actions
                } else {
                    throw new Error('Failed to approve leave application');
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function rejectLeave() {
        const applicationId = document.getElementById('leaveAppID').textContent;
        // Call API to reject the leave application with the provided applicationId
        fetch('/rejectLeave', {
            method: 'POST', headers: {
                'Content-Type': 'application/json'
            }, body: JSON.stringify({applicationId})
        })
            .then(response => {
                if (response.ok) {
                    console.log('Leave application rejected successfully');
                    // Optionally, update UI or perform other actions
                } else {
                    throw new Error('Failed to reject leave application');
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function fetchDefaulters(subject) {
        document.querySelector(".selectSub").innerText = "";
        fetch('/getDefaulters?subject=' + subject)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch attendance data');
                }
            })
            .then(attendance => {
                console.log(attendance)
                if (attendance.length === 0) {
                    console.log('table is empty')
                    document.querySelector(".emptyTable").style.display = "block";
                    document.querySelector("#defaulters_table").style.display = "none"
                } else {
                    document.querySelector(".emptyTable").style.display = "none";
                    document.querySelector("#defaulters_table").style.display = "table"
                }
                const tableBody = document.querySelector('#defaulters_table tbody');
                tableBody.innerHTML = '';
                attendance.forEach(record => {
                    console.log(record);
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                           <!--remove the time part-->
                        <td>${record[0]}</td>  
                        <td>${record[1]}</td>
                        <td>${record[2]}</td>
                        
                    `;
                    tableBody.appendChild(tr);
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }


    document.querySelector('.mark').addEventListener('click', function () {
        document.getElementById('subjectNav').style.display = "";
        markAttendance();
    });
    document.querySelector('.leave').addEventListener('click', function () {
        document.getElementById('subjectNav').style.display = "none";
        leaveApplication();
    });
    document.querySelector('.defaulter_button').addEventListener('click', function () {
        document.getElementById('subjectNav').style.display = "";
        defaulters();
    });

    function fetchStudentIDs(subject) {
        fetch('/getStudentUserIDs?subject=' + subject) // Replace with your actual endpoint to fetch student IDs based on the subject
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch student IDs');
                }
            })
            .then(studentIDs => {
                // Select the dropdown menu element
                const dropdown = document.getElementById('studentDropdown');

                // Clear previous options
                dropdown.innerHTML = '';

                // Add a default option
                const defaultOption = document.createElement('option');
                defaultOption.text = 'Select Student ID';
                defaultOption.value = '';
                dropdown.add(defaultOption);

                // Add each student ID as an option in the dropdown menu
                studentIDs.forEach(id => {
                    const option = document.createElement('option');
                    option.text = id;
                    option.value = id;
                    dropdown.add(option);
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function fetchAttendance(subject) {
        fetchStudentIDs(subject)
        document.getElementById('attendance-button').addEventListener('click', function () {
            const userID = document.getElementById('studentDropdown').value;
            fetch(`/getStudentDetails?userID=${userID}`)
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error('Failed to fetch student details');
                    }
                })
                .then(student => {
                    const studentDetailsDiv = document.getElementById('student-details');
                    studentDetailsDiv.innerHTML = `
                    <p><strong>Name:</strong> ${student.studentName}</p>
                    <p><strong>ID:</strong> ${student.studentId}</p>
                    <p><strong>Email:</strong> ${student.email}</p>
                `;
                    fetch(`/getStudentAttendance?userID=${userID}&subject=${selected_subject}`)
                        .then(response => {
                            if (response.ok) {
                                return response.json();
                            } else {
                                throw new Error('Failed to fetch student attendance');
                            }
                        })
                        .then(attendance => {
                            const tableBody = document.getElementById('attendance-data');
                            tableBody.innerHTML = ''; // Clear previous data

                            attendance.forEach(record => {
                                const row = document.createElement('tr');
                                row.innerHTML = `
                        <td>${record.subject}</td>
                        <td>${record.status}</td>
                        <td>${record.date.substring(0, 16)}</td>
                    `;
                                tableBody.appendChild(row);
                            });
                        })
                        .catch(error => {
                            console.error('Error:', error);
                        });
                })
                .catch(error => {
                    console.error('Error:', error);
                });


        });
    }


    function show_attendance() {

        document.querySelector(".mark").classList.remove("active");
        document.querySelector(".leave").classList.remove("active");
        document.querySelector(".defaulter_button").classList.remove("active")
        document.querySelector(".show_attendance").classList.add("active");
        document.querySelector(".logout").classList.remove("active");
        let attendanceSection = document.querySelector(".attendance-section");
        if (attendanceSection.style.display === "block") {
            attendanceSection.style.display = "none";
            document.querySelector(".nextBtn").style.display = "none";
            document.querySelector(".backBtn").style.display = "none";
        }
        let leaveSection = document.querySelector(".leave-section");
        if (leaveSection.style.display === "block") {
            leaveSection.style.display = "none";
        }
        let defaulter = document.querySelector(".defaulters");
        if (defaulter.style.display === "block") {
            defaulter.style.display = "none";
        }
        let att = document.querySelector(".attendance-page");
        if (att.style.display === "none") {
            att.style.display = "block";
        }
        document.getElementById("subject-0").click();
    }

    document.querySelector('.show_attendance').addEventListener('click', function () {
        document.getElementById('subjectNav').style.display = "";
        show_attendance();
    });
})
;


================================================================================

Filename: static/Scripts/login.js
Content:
document.getElementById('loginBtn').addEventListener('click', function (event) {
    event.preventDefault(); // Prevent default form submission behavior

    var username = document.getElementById('UserName').value;
    var password = document.getElementById('Password').value;

    // Create an object with username and password
    var data = {
        username: username,
        password: password
    };

    // Send a POST request to the server
    fetch('/login', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
        .then(response => {
            if (response.ok) {
                return response.json(); // Parse response JSON data
            } else {
                throw new Error('Failed to login');
            }
        })
        .then(data => {
            console.log('Login successful:', data);
            // Check user type and redirect accordingly
            if (data.usertype === 'Student') {
                window.location.href = '/student?userID=' + data.userID; // Redirect to student webpage with userID
            } else if (data.usertype === 'Faculty') {
                window.location.href = '/faculty?userID=' + data.userID;  // Redirect to faculty webpage
            } else if (data.usertype === 'Admin') {
                window.location.href = '/admin?userID=' + data.userID;
            } else {
                console.error('Unknown user type');
                // Handle unknown user type error
            }
        })
        .catch(error => {
            // Handle login error
            console.error('Login failed:', error);
            // Display error message to the user
            if (error.message === 'Invalid username or password') {
                // Display error message for invalid username or password
                // You can use JavaScript to update HTML elements to display the error message
                // For example:
                document.getElementById('errorMessage').innerText = 'Invalid username or password';
            } else {
                // Display generic error message for other errors
                // For example:
                document.getElementById('errorMessage').innerText = 'Failed to login. Please try again later.';
            }
        });
});


================================================================================

Filename: static/Scripts/student.js
Content:
document.addEventListener('DOMContentLoaded', function () {
    const urlParams = new URLSearchParams(window.location.search);
    const userID = urlParams.get('userID');

    function fetchStudentDetails() {
        fetch('/getStudentDetails?userID=' + userID)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch student details');
                }
            })
            .then(student => {
                document.getElementById('studentName').innerText = student.studentName;
                document.getElementById('studentEmail').innerText = student.email;
                document.getElementById('studentID').innerText = 'ID: ' + student.studentId;
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function fetchSubjectButtons() {
        fetch('/getStudentSubjects?userID=' + userID)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch student subjects');
                }
            })
            .then(subjects => {
                const nav = document.getElementById('subjectNav');
                subjects.forEach((subject, index) => {
                    const button = document.createElement('button');
                    button.textContent = subject.subject;
                    button.id = 'subjectButton_' + index; // Assign indexed ID
                    button.addEventListener('click', function () {
                        fetchAttendanceData(subject.subject);
                    });
                    nav.appendChild(button);
                });
                setTimeout(fetchAttendanceData, 1000, subjects[0].subject);
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }


    function fetchAttendanceData(subject) {
        document.getElementById('attendanceTable').style.display = 'none';
        document.getElementById('attendanceContainer').innerHTML = '';

        fetch('/getStudentAttendance?userID=' + userID + '&subject=' + subject)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch attendance data');
                }
            })
            .then(attendance => {
                console.log(attendance)
                const tableBody = document.querySelector('#attendanceTable tbody');
                tableBody.innerHTML = ''; // Clear existing table rows
                attendance.forEach(record => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                           <!--remove the time part-->
                        <td>${record.date.substring(0, 16)}</td>  
                        <td>${record.status}</td>
                      
                    `;
                    tableBody.appendChild(tr);
                });

                setTimeout(fetchAverageAttendance, 1000, subject);
                // show subject in the attendance  container in a h3 tag
                document.getElementById('attendanceContainer').innerHTML = `<h2>${subject}</h2>`;
                document.getElementById('attendanceTable').style.display = 'table';
                document.getElementById('averageAttendance').style.display = 'block';
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function fetchAverageAttendance(sub) {
        fetch('/getStudentAverageAttendance?userID=' + userID + '&subject=' + sub)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch average attendance');
                }
            })
            .then(averageAttendance => {
                const Percentage = document.getElementById('percent');
                Percentage.textContent = averageAttendance.average_attendance + "% ";

                const criteria = document.getElementById('criteria');
                criteria.textContent = averageAttendance.criterion + '%';

                const progressBar = document.getElementById('progressBar');
                const bar = progressBar.querySelector('.bar');
                const percentage = averageAttendance.average_attendance;
                bar.style.width = percentage + '%';

                bar.classList.remove('green', 'red', 'blue');

                if (percentage >= averageAttendance.criterion) {
                    bar.classList.add('green');
                    document.querySelector("meta[name=theme-color]").setAttribute("content", "#4CAF50");
                } else {
                    bar.classList.add('red');
                    document.querySelector("meta[name=theme-color]").setAttribute("content", "#FF5722");
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function showRecords() {
        document.querySelector(".mark").classList.add("active");
        document.querySelector(".leave").classList.remove("active");
        document.querySelector(".logout").classList.remove("active");
        let leaveSection = document.querySelector(".leave-section");
        if (leaveSection.style.display === "block") {
            leaveSection.style.display = "none";
        }
        let attendanceSection = document.querySelector(".Attendance-Section");
        if (attendanceSection.style.display === "none") {
            attendanceSection.style.display = "block";
            document.getElementById("subjectButton_0").click();
        }
    }

    document.querySelector('.mark').addEventListener('click', function () {
        showRecords();
    });

    function fetchLeaveApplications() {
        fetch('/getLeaveApplications?userID=' + userID)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch leave applications');
                }
            })
            .then(applications => {
                const tableBody = document.querySelector('#leaveTable tbody');
                tableBody.innerHTML = ''; // Clear existing table rows
                applications.forEach(application => {
                    console.log(application);
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                    <td>${application.applicationId}</td>
                    <td>${application.subject}</td>
                    <td>${application.status}</td>
                `;
                    tr.addEventListener('click', function () {
                        showLeaveDetails(application);
                    });
                    tableBody.appendChild(tr);
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

// Function to show leave application details
    function showLeaveDetails(application) {
        document.getElementById('leaveAppID').textContent = application.applicationId;
        document.getElementById('leaveSubject').textContent = application.subject;
        document.getElementById('leaveSDate').textContent = application.start_date.substring(0, 16);
        document.getElementById('leaveEDate').textContent = application.end_date.substring(0, 16);
        document.getElementById('leaveReason').textContent = application.reason;
        document.getElementById('leaveStatus').textContent = application.status;
        document.getElementById('leaveDetails').style.display = 'block';
    }

// Function to handle form submission for creating new leave application
    document.getElementById('leaveForm').addEventListener('submit', function (event) {
        event.preventDefault();

        // Get form field values
        const subject = document.getElementById('subject').value.trim(); // Trim whitespace
        const startDate = document.getElementById('startDate').value.trim(); // Trim whitespace
        const endDate = document.getElementById('endDate').value.trim(); // Trim whitespace
        const reason = document.getElementById('reason').value.trim(); // Trim whitespace

        // Check if any value is empty
        if (subject === '' || startDate === '' || endDate === '' || reason === '') {
            alert('Please fill in all fields before submitting the leave application.');
            return; // Exit the function without submitting the form
        }

        // Create the request body
        const formData = {
            subject: subject,
            startDate: startDate,
            endDate: endDate,
            reason: reason,
            studentId: userID
        };

        // Send a POST request to the Flask API endpoint
        fetch('/submitLeaveApplication', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to submit leave application');
                }
            })
            .then(data => {
                // Handle success response from the server
                alert('Leave application submitted successfully!');
                // Clear form fields
                document.getElementById('subject').value = ''; // Reset subject to empty string
                document.getElementById('startDate').value = '';
                document.getElementById('endDate').value = '';
                document.getElementById('reason').value = '';
                fetchLeaveApplications();
            })
            .catch(error => {
                console.error('Error:', error);
                // Handle error response from the server
                alert('Failed to submit leave application. Please try again later.');
            });
    });


    function fetchSubjectDropdown() {
        fetch('/getStudentSubjects?userID=' + userID)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch student subjects');
                }
            })
            .then(subjects => {
                const subjectDropdown = document.getElementById('subject');
                // Clear old options
                subjectDropdown.innerHTML = '';
                // Add default option
                const defaultOption = document.createElement('option');
                defaultOption.value = '';
                defaultOption.textContent = 'Select Subject';
                subjectDropdown.appendChild(defaultOption);
                // Add new options
                subjects.forEach(subject => {
                    const option = document.createElement('option');
                    option.value = subject.subject;
                    option.textContent = subject.subject;
                    subjectDropdown.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }


    function leaveApplication() {
        document.querySelector(".mark").classList.remove("active");
        document.querySelector(".leave").classList.add("active");
        document.querySelector(".logout").classList.remove("active");
        let leaveSection = document.querySelector(".leave-section");
        if (leaveSection.style.display === "none") {
            leaveSection.style.display = "block";
        }
        let attendanceSection = document.querySelector(".Attendance-Section");
        if (attendanceSection.style.display === "block") {
            attendanceSection.style.display = "none";
        }
        fetchLeaveApplications();
        setTimeout(fetchSubjectDropdown, 1000);
    }

    document.querySelector('.leave').addEventListener('click', function () {
        leaveApplication();
    });


    setTimeout(fetchSubjectButtons, 1000);
    fetchStudentDetails();
});



================================================================================

Filename: templates/admin.html
Content:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/static/CSS/admin.css">
    <title>Admin Portal</title>
</head>
<body>
<h1>Admin Portal</h1>
<div class="form-container">
    <div>
        <h2>Add New Student or Faculty</h2>
    <form id="addMemberForm">
        <label for="memberType">Member Type:</label>
        <select id="memberType" required>
            <option value="student">Student</option>
            <option value="faculty">Faculty</option>
        </select><br><br>
        <p style="display: inline; text-align: left;" class="details" style="display: inline;"><strong>ID:</strong>
            <span id="UserId"></span></p>
        <br><br>
    
        <label for="name">Name :</label>
        <input type="text" id="name" required><br><br>
        <label for="email">Email Id:</label>
        <input type="text" id="email" required><br><br>
        <label for="passwd">Password:</label>
        <input type="text" id="passwd" required><br><br>
        <button type="submit" class="button">Add Member</button>
        <br><br>
        <p id="successMessage" style="display: none; color: green;"></p>
    </form>
    </div>
    
    <!-- Section to remove a student or faculty -->
    <div>
    <h2>Remove Student or Faculty</h2>
    
        <form id="removeMemberForm">
            <label for="memberIDToRemove">User ID:</label>
            <input type="text" id="memberIDToRemove" name="memberIDToRemove" required><br><br>
            <button type="submit" class="button">Remove Member</button>
            <p id="successMessageRm" style="display: none; color: green; margin-top: 10px;"></p>
        </form>
        <br>
        <div id="confirmationSection" style="display: none;" class="confirmation">
            <h2>Member Details</h2>
            <div id="memberDetails"></div>
            <button type="button" id="confirmBtn">Confirm Remove</button>
            <button type="button" id="cancelBtn">Cancel</button>
        </div>
    </div>
    
    <div>
    <h2>Add Subject</h2>
    
        <form id="AddSubjectForm">
            <label for="AddSubjectID">User ID:</label>
            <input type="text" id="AddSubjectID" required><br><br>
            <label for="subjectName">Subject Name:</label>
            <input type="text" id="subjectName" required><br><br>
            <input type="hidden" id="facultyAttendancePercentage">
            <button type="submit" class="button">Add Subject</button>
            <br>
            <div id="successMessageAs" style="display: none; margin-top: 10px;color: green;"></div>
    
        </form>
        <br>
        <div id="confirmationSectionAs" style="display: none;" class="confirmation">
            <div id="subjectDetails"></div>
            <button id="confirmBtnAs">Confirm</button>
            <button id="cancelBtnAs">Cancel</button>
        </div>
    </div>
</div>


<h2>Remove Subject</h2>
<form id="RemoveSubjectForm">
    <label for="removeSubjectUserId">User ID:</label>
    <input type="text" id="removeSubjectUserId" required><br><br>
    <label for="removeSubjectName">Subject:</label>
    <select id="removeSubjectName">
        <!-- Options will be dynamically populated based on user selection -->
    </select><br><br>
    <button type="submit" class="button">Remove Subject</button>
</form>


<script src="/static/Scripts/admin.js"></script>

</body>
</html>


================================================================================

Filename: templates/faculty.html
Content:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://kit.fontawesome.com/927c674a72.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/static/CSS/facultySidebar.css">
    <link rel="stylesheet" href="/static/CSS/faculty.css">

    <title>Faculty Webpage</title>
</head>
<body>
<header>
    <h1>FACULTY PORTAL</h1>
</header>
<div style="position: absolute; top:5%" class="wrapper">
    <!--Top menu -->
    <div class="section">
        <!-- <div class="top_navbar">
            <div class="hamburger">
                <a href="#">
                    <i class="fas fa-bars"></i>
                </a>
            </div>
        </div> -->
        <div class="sidebar">
            <!--profile image & text-->
            <div class="profile">
                <a href="https://ibb.co/bb8mG95" style="pointer-events: none;"> <img
                        src="https://i.ibb.co/bb8mG95/profile.jpg" alt="profile" border="0"></a>
                <h3 id="facultyName">NAME</h3>
                <p id="facultyEmail">Faculty</p>
                <p id="facultyID"></p>

            </div>
            <!--menu item-->
            <ul>

                <li>
                    <a class="active mark ">
                        <span class="icon"><i class="fas fa-home"></i></span>
                        <span class="item">Mark attendance</span>
                    </a>
                </li>
                <li>
                    <a class="leave">
                        <span class="icon"><i class="fas fa-desktop"></i></span>
                        <span class="item">Leave application</span>
                    </a>
                </li>
                <li>
                    <a class="defaulter_button">
                        <span class="icon"><i class="fas fa-user-friends"></i></span>
                        <span class="item">Defaulter list</span>
                    </a>
                </li>
                <li>
                    <a class="show_attendance">
                        <span class="icon"><i class="fas fa-user-friends"></i></span>
                        <span class="item">Check Attendance</span>
                    </a>
                </li>
                <li>
                    <a class="logout" href="/">
                        <span class="icon"><i class="fa fa-sign-out"></i></span>
                        <span class="item">Log out</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    <!-- <script>
        var hamburger = document.querySelector(".hamburger");
        hamburger.addEventListener("click", function () {
            document.querySelector("body").classList.toggle("active");
        })
    </script> -->
</div>
<nav id="subjectNav">

</nav>
<button class="nextBtn btn" style="display: block;"> Next</button>
<button class="backBtn btn" style="display: block;">Back</button>
<section class="attendance-section" style="display: block;">
    <div class="attendance-box">
        <h2>MARK ATTENDANCE</h2>
        <div class="attendanceMark">
            <p class="details" style="display: inline; text-align: left;"><strong>Name:</strong> <span
                    id="studentName"></span></p>
            <p style="display: inline; text-align: left;" class="details" style="display: inline;"><strong>ID:</strong>
                <span id="rollNumber"></span></p>
            <br>
            <label class="datestyle" for="date" style="font-weight:bolder;margin-left: 0px ; ">Date:</label>
            <input class="datestyle" id="date" type="date" value="<?= date('yyyy-MM-dd') ?>" required>
            <br>
            <label style="margin-left: 0px;margin-right: 0px; padding-right: 5px;" for="present">Present</label>
            <input style="padding-right: 5px;" id="present" type="radio" name="stat">
            <label style=" margin-right: 0px; padding-right: 5px;" for="absent">Absent</label>
            <input id="absent" type="radio" name="stat">
            <br>
            <button class="submit">Mark</button>
        </div>
    </div>
</section>

<section class="leave-section" style="display: none;">
    <table id="leave_table" class="leave_table_class" style="color: #EDF7FE;">
        <thead>
        <tr>
            <th>Application ID</th>
            <th>Subject</th>
            <th>Student ID</th>
            <th>Student Name</th>
            <th>Status</th>
        </tr>
        

        </thead>
        <tbody>
        <!-- Table rows will be dynamically inserted here -->
        <tr id="some" class="non-hoverable" style="display: none;">
            <td class="leave-details" colspan="3">
                <div id="leaveDetails">
                        <h3 style="color: #ffd76a;margin-bottom: 9px;">Leave Application Details</h3>
                        <p><strong>Application ID:</strong> <span id="leaveAppID"></span></p>
                        <p><strong>Subject:</strong> <span id="leaveSubject"></span></p>
                        <p><strong>Student ID:</strong> <span id="leaveStudentID"></span></p>
                        <p><strong>Student Name:</strong> <span id="leaveStudentName"></span></p>
                        <p><strong>Start Date:</strong> <span id="leaveSDate"></span></p>
                        <p><strong>End Date:</strong> <span id="leaveEDate"></span></p>
                        <p><strong>Reason:</strong> <span id="leaveReason"></span></p>
                        <p><strong>Status:</strong> <span id="leaveStatus"></span></p>

                    </div>
            </td>
            <td colspan="2">
                <div id="leaveBtns">
                    <button class="approveBtn ">Approve</button>
                    <button class="rejectBtn ">Reject</button>
                </div>

            </td>
        </tr>
        </tbody>
    </table>
 
</section>
<section class="defaulters" style="display: none;">
    <table id="defaulters_table" style="color: #EDF7FE;display: none;"> <!-- Set display to none initially -->
        <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Average attendance</th>
            <!-- Assuming you want to display the date -->
        </tr>
        </thead>
        <tbody>
        <!-- Attendance data will be dynamically inserted here -->
        </tbody>
    </table>
    <p class="selectSub">Please select a subject</p>
    <p class="emptyTable" style="display: none;">There are no defaulters.</p>
</section>

<section class="attendance-page" style="display: none;">
<section id="checkAttendance">
    <div id="selectionOfRoll">
        <label for="studentDropdown" style="font-size: 25px;font-weight: bolder;">Roll No.</label>
        <select id="studentDropdown" >
            <!-- Options will be dynamically inserted here -->
        </select>
    </div>
    
    <button id="attendance-button" >Show Attendance</button><br>
</section>
    <section id="studentAttendanceTable">
        <h3 style="padding-bottom: 25px;color: #f1c03dde;font-size: larger;">Student Details</h3>
        <div id="student-details">
            <!-- Student details will be dynamically inserted here -->
        </div>
        <table id="attendance-table">
            <thead>
                <tr>
                    <th>Subject</th>
                    <th>Status</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody id="attendance-data">
                <!-- Attendance data will be dynamically inserted here -->
            </tbody>
        </table>
    </section>
     
</section>
<footer>
    <p id="footerText">YEAR 2024-25</p>
</footer>

<script src="/static/Scripts/faculty.js"></script>

</body>
</html>


================================================================================

Filename: templates/login.html
Content:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Log in</title>
    <link rel="stylesheet" href="/static/CSS/login.css">
    <!-- <link rel="stylesheet" href="..\static\CSS\login.css"> -->

    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            background: linear-gradient(to right, rgba(59, 127, 230, 0.404), rgba(251, 251, 251, 0.753), rgba(161, 42, 42, 0.559));
            background-size: cover;
            background-position: center;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            animation: backgroundAnimation 20s infinite alternate;
            transition: background-color 0.5s ease;
        }

        body:hover {
            background-color: #1e161697;
        }

        /* @keyframes backgroundAnimation {
          from {
            filter: brightness(100%);
          }

          to {
            filter: brightness(80%);
          }
        } */

        .form {
            position: relative;
            z-index: 1;
            background: #ffffff;
            max-width: 360px;
            margin: 0 auto 100px;
            padding: 45px;
            text-align: center;
            box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            transform: translateY(0);
            opacity: 1;
            transition: transform 0.5s ease, opacity 0.5s ease;
        }

        .form:hover {
            transform: translateY(-10px);
            opacity: 0.9;
        }

        .form input, .form button {
            transition: background 0.3s ease, color 0.3s ease, transform 0.3s ease;
        }

        .form input:hover, .form button:hover {
            transform: scale(1.05);
        }

        .form button {
            font-family: "Roboto", sans-serif;
            text-transform: uppercase;
            outline: 0;
            background: #f075d5a8;
            width: 100%;
            border: 0;
            padding: 15px;
            color: #FFFFFF;
            font-size: 15px;
            cursor: pointer;
        }

        /* .form button:hover {
          background: #57abc398;
        } */

        #heading {
            color: transparent;
            font-size: 45px;
            font-weight: bolder;
            background: linear-gradient(to right, pink, rgb(95, 95, 222));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
    </style>
</head>
<body>
<div class="login-page">
    <div class="form">
        <form class="login-form">
            <h1 id="heading">Sign in</h1>
            <input type="text" placeholder="userID" id="UserName"/>
            <input type="password" placeholder="password" id="Password"/>
            <button id="loginBtn">login</button>
             <p id="errorMessage" style="color: red;"></p>
        </form>
    </div>
   

</div>
<script src="/static/Scripts/login.js"></script>
</body>
</html>


================================================================================

Filename: templates/student.html
Content:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="theme-color" content="#2196F3">
    <script src="https://kit.fontawesome.com/927c674a72.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/static/CSS/student.css">
    <link rel="stylesheet" href="/static/CSS/studentSidebar.css">
    <title>Student Webpage</title>
</head>
<body>
<header>
    <h1>STUDENT PORTAL</h1>
</header>
<div style="position: absolute; top:5%" class="wrapper">
    <!--Top menu -->
    <div class="section">
        <div class="top_navbar">
            <div class="hamburger">
                <a href="#">
                    <i class="fas fa-bars"></i>
                </a>
            </div>
        </div>
        <div class="sidebar">
            <!-- Sidebar for John Doe -->
            <div class="profile">
                <a href="https://ibb.co/bb8mG95" style="pointer-events: none;"> <img
                        src="https://i.ibb.co/bb8mG95/profile.jpg" alt="profile" border="0"></a>
                <h3 id="studentName">NAME</h3>
                <p id="studentEmail">Faculty</p>
                <p id="studentID"></p>
            </div>
            <ul>
                <li>
                    <a class="active mark ">
                        <span class="icon"><i class="fas fa-home"></i></span>
                        <span class="item">Check Attendance</span>
                    </a>
                </li>
                <li>
                    <a class="leave">
                        <span class="icon"><i class="fas fa-desktop"></i></span>
                        <span class="item">Leave Application</span>
                    </a>
                </li>
 <li>
                    <a class="logout" href="/">
                        <span class="icon"><i class="fa fa-sign-out"></i></span>
                        <span class="item">Log out</span>
                    </a>
                </li>            </ul>
        </div>
    </div>
    <script>
        var hamburger = document.querySelector(".hamburger");
        hamburger.addEventListener("click", function () {
            document.querySelector("body").classList.toggle("active");
        })
    </script>
</div>
<nav id="subjectNav">
    <!-- Subject buttons will be dynamically inserted here -->
</nav>

<section class="Attendance-Section" style="display: block;">
    <div id="attendanceContainer"></div> <!-- Container for the "Show Attendance" button -->
    <div id="averageAttendance" style="display:none;">
        <p>ATTENDANCE PERCENTAGE: <strong id="percent">40%</strong></p>
        <div id="progressBar">
            <div class="bar" id="attendanceBar"></div>
        </div>
        <div> PASS CRITERIA: <strong id="criteria">0%</strong></p></div>
    </div>

    <table id="attendanceTable" style="display: none;"> <!-- Set display to none initially -->
        <thead>
            <tr>
                <th>DATE</th>
                <th>ATTENDANCE</th>
            </tr>
        </thead>
        <tbody>
            <!-- Attendance data will be dynamically inserted here -->
        </tbody>
    </table>
</section>

<section class="leave-section" style="display: none; ">
<!-- <h2>Leave Applications</h2> -->
    <table id="leaveTable">
        <thead>
        <tr>
            <th>Application ID</th>
            <th>Subject</th>
            <th>Status</th>
            </tr>
        </thead>
        <tbody >
            <!-- Leave applications will be dynamically inserted here -->
        </tbody>
    </table>

    <div id="leaveDetails" style="display: none;">
        <h3>Leave Application Details</h3>
        <p><strong>Application ID:</strong> <span id="leaveAppID"></span></p>
        <p><strong>Subject:</strong> <span id="leaveSubject"></span></p>
        <p><strong>From:</strong> <span id="leaveSDate"></span></p>
        <p><strong>To:</strong> <span id="leaveEDate"></span></p>
        <p><strong>Reason Specified:</strong> <span id="leaveReason"></span></p>
        <p><strong>Status:</strong> <span id="leaveStatus"></span></p>
    </div>

    <div id="leaveFormContainer">
        <h3>Request For Leave</h3>
        <form id="leaveForm">
            <div class="form-group">
                <label for="subject">Subject:</label>
                <select id="subject" name="subject" required>
                    <option value="">Select a subject</option>
                    <!-- Populate options dynamically -->
                </select>
            </div>
            <div class="form-group">
                <label for="startDate">From:</label>
                <input type="date" id="startDate" name="startDate" required>
            </div>
            <div class="form-group">
                <label for="endDate">To:</label>
                <input type="date" id="endDate" name="endDate" required>
            </div>
            <div class="form-group">
                <label for="reason">Specify the Reason:</label>
                <textarea id="reason" name="reason" required></textarea>
            </div>
            <button type="submit">Submit</button>
        </form>
    </div>
</section>

<footer>
    YEAR 2024-25
</footer>
<script></script>
<script src="/static/Scripts/student.js"></script>
</body>
</html>


================================================================================
